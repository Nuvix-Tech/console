{
  "openapi": "3.0.0",
  "paths": {
    "/v1/users": {
      "post": {
        "description": "Create a new user.",
        "operationId": "create",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create user",
        "tags": ["users"]
      },
      "get": {
        "description": "Get a list of all the project's users. You can use the query params to filter your results.",
        "operationId": "list",
        "parameters": [
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, email, phone, status, passwordUpdate, registration, emailVerification, phoneVerification, labels.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter your list results. Max length: 256 chars.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List users",
        "tags": ["users"]
      }
    },
    "/v1/users/argon2": {
      "post": {
        "description": "Create a new user. Password provided must be hashed with the [Argon2](https://en.wikipedia.org/wiki/Argon2) algorithm. Use the [POST /users](https://docs.nuvix.in/server/users#usersCreate) endpoint to create users with a plain text password.",
        "operationId": "createArgon2User",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create user with Argon2 password",
        "tags": ["users"]
      }
    },
    "/v1/users/bcrypt": {
      "post": {
        "description": "Create a new user. Password provided must be hashed with the [Bcrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm. Use the [POST /users](https://docs.nuvix.in/server/users#usersCreate) endpoint to create users with a plain text password.",
        "operationId": "createBcryptUser",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create user with bcrypt password",
        "tags": ["users"]
      }
    },
    "/v1/users/md5": {
      "post": {
        "description": "Create a new user. Password provided must be hashed with the [MD5](https://en.wikipedia.org/wiki/MD5) algorithm. Use the [POST /users](https://docs.nuvix.in/server/users#usersCreate) endpoint to create users with a plain text password.",
        "operationId": "createMD5User",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create user with MD5 password",
        "tags": ["users"]
      }
    },
    "/v1/users/sha": {
      "post": {
        "description": "Create a new user. Password provided must be hashed with the [SHA](https://en.wikipedia.org/wiki/Secure_Hash_Algorithm) algorithm. Use the [POST /users](https://docs.nuvix.in/server/users#usersCreate) endpoint to create users with a plain text password.",
        "operationId": "createSHAUser",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserWithShaDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create user with SHA password",
        "tags": ["users"]
      }
    },
    "/v1/users/phpass": {
      "post": {
        "deprecated": true,
        "description": "Create a new user. Password provided must be hashed with the [PHPass](https://www.openwall.com/phpass/) algorithm. Use the [POST /users](https://docs.nuvix.in/server/users#usersCreate) endpoint to create users with a plain text password.",
        "operationId": "createPHPassUser",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create user with PHPass password",
        "tags": ["users"]
      }
    },
    "/v1/users/scrypt": {
      "post": {
        "description": "Create a new user. Password provided must be hashed with the [Scrypt](https://github.com/Tarsnap/scrypt) algorithm. Use the [POST /users](https://docs.nuvix.in/server/users#usersCreate) endpoint to create users with a plain text password.",
        "operationId": "createScryptUser",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserWithScryptDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create user with Scrypt password",
        "tags": ["users"]
      }
    },
    "/v1/users/scrypt-modified": {
      "post": {
        "description": "Create a new user. Password provided must be hashed with the [Scrypt Modified](https://gist.github.com/Meldiron/eecf84a0225eccb5a378d45bb27462cc) algorithm. Use the [POST /users](https://docs.nuvix.in/server/users#usersCreate) endpoint to create users with a plain text password.",
        "operationId": "createScryptModifiedUser",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserWithScryptModifedDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create user with Scrypt modified password",
        "tags": ["users"]
      }
    },
    "/v1/users/usage": {
      "get": {
        "description": "Get usage metrics and statistics for all users in the project. You can view the total number of users and sessions. The response includes both current totals and historical data over time. Use the optional range parameter to specify the time window for historical data: 24h (last 24 hours), 30d (last 30 days), or 90d (last 90 days). If not specified, range defaults to 30 days.",
        "operationId": "getUsage",
        "parameters": [
          {
            "name": "range",
            "required": false,
            "in": "query",
            "description": "Date range.",
            "schema": {
              "default": "30d",
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageUsersModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get users usage stats",
        "tags": ["users"]
      }
    },
    "/v1/users/identities": {
      "get": {
        "description": "Get identities for all users.",
        "operationId": "listIdentities",
        "parameters": [
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, provider, providerUid, providerEmail, providerAccessTokenExpiry.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter your list results. Max length: 256 chars.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List identities",
        "tags": ["users"]
      }
    },
    "/v1/users/identities/{identityId}": {
      "delete": {
        "description": "Delete an identity by its unique ID.",
        "operationId": "deleteIdentity",
        "parameters": [
          {
            "name": "identityId",
            "required": true,
            "in": "path",
            "description": "Identity ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete identity",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "description": "Get a user by its unique ID.",
        "operationId": "get",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get user",
        "tags": ["users"]
      },
      "delete": {
        "description": "Delete a user by its unique ID, thereby releasing it's ID. Since ID is released and can be reused, all user-related resources like documents or storage files should be deleted before user deletion. If you want to keep ID reserved, use the [updateStatus](https://docs.nuvix.in/server/users#usersUpdateStatus) endpoint instead.",
        "operationId": "delete",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete user",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/prefs": {
      "get": {
        "description": "Get the user preferences by its unique ID.",
        "operationId": "getPrefs",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PREFERENCES"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get user preferences",
        "tags": ["users"]
      },
      "patch": {
        "description": "Update the user preferences by its unique ID. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.",
        "operationId": "updatePrefs",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPrefsDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PREFERENCES"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update user preferences",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/status": {
      "patch": {
        "description": "Update the user status by its unique ID. Use this endpoint as an alternative to deleting a user if you want to keep user's ID reserved.",
        "operationId": "updateStatus",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserStatusDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update user status",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/labels": {
      "put": {
        "description": "Update the user labels by its unique ID. \n\nLabels can be used to grant access to resources. While teams are a way for user's to share access to a resource, labels can be defined by the developer to grant access without an invitation. See the [Permissions docs](https://docs.nuvix.in/permissions) for more info.",
        "operationId": "updateLabels",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserLabelDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update user labels",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/name": {
      "patch": {
        "description": "Update the user name by its unique ID.",
        "operationId": "updateName",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserNameDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update name",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/password": {
      "patch": {
        "description": "Update the user password by its unique ID.",
        "operationId": "updatePassword",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPasswordDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update password",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/email": {
      "patch": {
        "description": "Update the user email by its unique ID.",
        "operationId": "updateEmail",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserEmailDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update email",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/phone": {
      "patch": {
        "description": "Update the user phone by its unique ID.",
        "operationId": "updatePhone",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPhoneDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update phone",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/jwts": {
      "post": {
        "description": "Use this endpoint to create a JSON Web Token for user by its unique ID. You can use the resulting JWT to authenticate on behalf of the user. The JWT secret will become invalid if the session it uses gets deleted.",
        "operationId": "createJWT",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateJwtDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWTModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create user JWT",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/memberships": {
      "get": {
        "description": "Get the user membership list by its unique ID.",
        "operationId": "listMemberships",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, teamId, invited, joined, confirm, roles.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter your list results. Max length: 256 chars.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List user memberships",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/tokens": {
      "post": {
        "description": "Returns a token with a secret key for creating a session. Use the user ID and secret and submit a request to the [PUT /account/sessions/token](https://docs.nuvix.in/references/cloud/client-web/account#createSession) endpoint to complete the login process.",
        "operationId": "createToken",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTokenDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create token",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/logs": {
      "get": {
        "description": "Get the user activity logs list by its unique ID.",
        "operationId": "listLogs",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: status, responseStatusCode, duration, requestMethod, requestPath, deploymentId.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List user logs",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/verification": {
      "patch": {
        "description": "Update the user email verification status by its unique ID.",
        "operationId": "updateEmailVerification",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserEmailVerificationDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update phone verification",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/verification/phone": {
      "patch": {
        "description": "Update the user phone verification status by its unique ID.",
        "operationId": "updatePhoneVerification",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPoneVerificationDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update phone verification",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/sessions": {
      "get": {
        "description": "Get the user sessions list by its unique ID.",
        "operationId": "listSessions",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List user sessions",
        "tags": ["users"]
      },
      "post": {
        "description": "Creates a session for a user. Returns an immediately usable session object.\n\nIf you want to generate a token for a custom authentication flow, use the [POST /users/{userId}/tokens](https://docs.nuvix.in/server/users#createToken) endpoint.",
        "operationId": "createSession",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create session",
        "tags": ["users"]
      },
      "delete": {
        "description": "Delete all user's sessions by using the user's unique ID.",
        "operationId": "deleteSessions",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete user sessions",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/sessions/{sessionId}": {
      "delete": {
        "description": "Delete a user sessions by its unique ID.",
        "operationId": "deleteSession",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "required": true,
            "in": "path",
            "description": "Session ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete user session",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/targets": {
      "post": {
        "description": "Create a messaging target.",
        "operationId": "createTarget",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTargetDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create user target",
        "tags": ["users"]
      },
      "get": {
        "description": "List the messaging targets that are associated with a user.",
        "operationId": "listTargets",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, providerId, identifier, providerType.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List user targets",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/targets/{targetId}": {
      "get": {
        "description": "Get a user's push notification target by ID.",
        "operationId": "getTarget",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetId",
            "required": true,
            "in": "path",
            "description": "Target ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get user target",
        "tags": ["users"]
      },
      "patch": {
        "description": "Update a messaging target.",
        "operationId": "updateTarget",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetId",
            "required": true,
            "in": "path",
            "description": "Target ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTargetDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update user target",
        "tags": ["users"]
      },
      "delete": {
        "description": "Delete a messaging target.",
        "operationId": "deleteTarget",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetId",
            "required": true,
            "in": "path",
            "description": "Target ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete user target",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/mfa": {
      "patch": {
        "description": "Enable or disable MFA on a user account.",
        "operationId": "updateMfa",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMfaStatusDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update MFA",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/mfa/factors": {
      "get": {
        "description": "List the factors available on the account to be used as a MFA challange.",
        "operationId": "listMfaFactors",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFAFactorsModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List factors",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/mfa/recovery-codes": {
      "get": {
        "description": "Get recovery codes that can be used as backup for MFA flow by User ID. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.",
        "operationId": "getMfaRecoveryCodes",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFARecoveryCodesModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get MFA recovery codes",
        "tags": ["users"]
      },
      "patch": {
        "description": "Generate recovery codes used as backup for MFA flow for User ID. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method by client SDK.",
        "operationId": "createMfaRecoveryCodes",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFARecoveryCodesModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create MFA recovery codes",
        "tags": ["users"]
      },
      "put": {
        "description": "Regenerate recovery codes that can be used as backup for MFA flow by User ID. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.",
        "operationId": "updateMfaRecoveryCodes",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFARecoveryCodesModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update MFA recovery codes (regenerate)",
        "tags": ["users"]
      }
    },
    "/v1/users/{userId}/mfa/authenticators/{type}": {
      "delete": {
        "description": "Delete an authenticator app.",
        "operationId": "deleteMfaAuthenticator",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Type of authenticator.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete authenticator",
        "tags": ["users"]
      }
    },
    "/v1/teams": {
      "post": {
        "description": "Create a new team. The user who creates the team will automatically be assigned as the owner of the team. Only the users with the owner role can invite new members, add new owners and delete or update the team.",
        "operationId": "create",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create team",
        "tags": ["teams"]
      },
      "get": {
        "description": "Get a list of all the teams in which the current user is a member. You can use the parameters to filter your results.",
        "operationId": "list",
        "parameters": [
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, total, billingPlan.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter your list results. Max length: 256 chars.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List teams",
        "tags": ["teams"]
      }
    },
    "/v1/teams/{teamId}": {
      "get": {
        "description": "Get a team by its ID. All team members have read access for this resource.",
        "operationId": "get",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "description": "Team ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get team",
        "tags": ["teams"]
      },
      "put": {
        "description": "Update the team's name by its unique ID.",
        "operationId": "updateName",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "description": "Team ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update name",
        "tags": ["teams"]
      },
      "delete": {
        "description": "Delete a team using its ID. Only team members with the owner role can delete the team.",
        "operationId": "delete",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "description": "Team ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete team",
        "tags": ["teams"]
      }
    },
    "/v1/teams/{teamId}/prefs": {
      "get": {
        "description": "Get the team's shared preferences by its unique ID. If a preference doesn't need to be shared by all team members, prefer storing them in [user preferences](https://docs.nuvix.in/references/cloud/client-web/account#getPrefs).",
        "operationId": "getPrefs",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "description": "Team ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PREFERENCES"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get team preferences",
        "tags": ["teams"]
      },
      "put": {
        "description": "Update the team's preferences by its unique ID. The object you pass is stored as is and replaces any previous value. The maximum allowed prefs size is 64kB and throws an error if exceeded.",
        "operationId": "updatePrefs",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "description": "Team ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamPrefsDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PREFERENCES"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update preferences",
        "tags": ["teams"]
      }
    },
    "/v1/teams/{teamId}/memberships": {
      "post": {
        "description": "Invite a new member to join your team. Provide an ID for existing users, or invite unregistered users using an email or phone number. If initiated from a Client SDK, Nuvix will send an email or sms with a link to join the team to the invited user, and an account will be created for them if one doesn't exist. If initiated from a Server SDK, the new member will be added automatically to the team.\n\nYou only need to provide one of a user ID, email, or phone number. Nuvix will prioritize accepting the user ID > email > phone number if you provide more than one of these parameters.\n\nUse the `url` parameter to redirect the user from the invitation email to your app. After the user is redirected, use the [Update Team Membership Status](https://docs.nuvix.in/references/cloud/client-web/teams#updateMembershipStatus) endpoint to allow the user to accept the invitation to the team. \n\nPlease note that to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) Nuvix will accept the only redirect URLs under the domains you have added as a platform on the Nuvix Console.",
        "operationId": "createMembership",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "description": "Team ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMembershipDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create team membership",
        "tags": ["teams"]
      },
      "get": {
        "description": "Use this endpoint to list a team's members using the team's ID. All team members have read access to this endpoint. Hide sensitive attributes from the response by toggling membership privacy in the Console.",
        "operationId": "listMemberships",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "description": "Team ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, teamId, invited, joined, confirm, roles.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter your list results. Max length: 256 chars.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List team memberships",
        "tags": ["teams"]
      }
    },
    "/v1/teams/{teamId}/memberships/{membershipId}": {
      "get": {
        "description": "Get a team member by the membership unique id. All team members have read access for this resource. Hide sensitive attributes from the response by toggling membership privacy in the Console.",
        "operationId": "getMembership",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "description": "Team ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "membershipId",
            "required": true,
            "in": "path",
            "description": "Membership ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get team membership",
        "tags": ["teams"]
      },
      "patch": {
        "description": "Modify the roles of a team member. Only team members with the owner role have access to this endpoint. Learn more about [roles and permissions](https://docs.nuvix.in/permissions).",
        "operationId": "updateMembership",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "description": "Team ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "membershipId",
            "required": true,
            "in": "path",
            "description": "Membership ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMembershipDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update membership",
        "tags": ["teams"]
      },
      "delete": {
        "description": "This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.",
        "operationId": "deleteMembership",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "description": "Team ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "membershipId",
            "required": true,
            "in": "path",
            "description": "Membership ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete team membership",
        "tags": ["teams"]
      }
    },
    "/v1/teams/{teamId}/memberships/{membershipId}/status": {
      "patch": {
        "description": "Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email received by the user.\n\nIf the request is successful, a session for the user is automatically created.",
        "operationId": "updateMembershipStatus",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "description": "Team ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "membershipId",
            "required": true,
            "in": "path",
            "description": "Membership ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMembershipStatusDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update team membership status",
        "tags": ["teams"]
      }
    },
    "/v1/account": {
      "post": {
        "description": "Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](https://docs.nuvix.in/references/cloud/client-web/account#createVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](https://docs.nuvix.in/references/cloud/client-web/account#createEmailSession).",
        "operationId": "create",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create Account",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10,
          "configKey": "create_account"
        }
      },
      "get": {
        "description": "Get the currently logged in user.",
        "operationId": "get",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get Account",
        "tags": ["account"]
      },
      "delete": {
        "description": "Delete the currently logged in user.",
        "operationId": "delete",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete Account",
        "tags": ["account"]
      }
    },
    "/v1/account/prefs": {
      "get": {
        "description": "Get the preferences as a key-value object for the currently logged in user.",
        "operationId": "getPrefs",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PREFERENCES"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get account preferences",
        "tags": ["account"]
      },
      "patch": {
        "description": "Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.",
        "operationId": "updatePrefs",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePrefsDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PREFERENCES"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update preferences",
        "tags": ["account"]
      }
    },
    "/v1/account/name": {
      "patch": {
        "description": "Update currently logged in user account name.",
        "operationId": "updateName",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNameDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update name",
        "tags": ["account"]
      }
    },
    "/v1/account/password": {
      "patch": {
        "description": "Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth, Team Invites and Magic URL, oldPassword is optional.",
        "operationId": "updatePassword",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update password",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10
        }
      }
    },
    "/v1/account/email": {
      "patch": {
        "description": "Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request.\nThis endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password.",
        "operationId": "updateEmail",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update email",
        "tags": ["account"]
      }
    },
    "/v1/account/phone": {
      "patch": {
        "description": "Update the currently logged in user's phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the [POST /account/verification/phone](https://docs.nuvix.in/references/cloud/client-web/account#createPhoneVerification) endpoint to send a confirmation SMS.",
        "operationId": "updatePhone",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update phone",
        "tags": ["account"]
      }
    },
    "/v1/account/status": {
      "patch": {
        "description": "Block the currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. To completely delete a user, use the Users API instead.",
        "operationId": "updateStatus",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update status",
        "tags": ["account"]
      }
    },
    "/v1/account/verification": {
      "post": {
        "description": "Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](https://docs.nuvix.in/references/cloud/client-web/account#updateVerification). The verification link sent to the user's email address is valid for 7 days.\n\nPlease note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.",
        "operationId": "createVerification",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailVerificationDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create email verification",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10,
          "key": "ip:{ip},userId:{param-userId}"
        }
      },
      "put": {
        "description": "Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.",
        "operationId": "updateVerification",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailVerificationDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update email verification (confirmation)",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10,
          "key": "ip:{ip},userId:{param-userId}"
        }
      }
    },
    "/v1/account/verification/phone": {
      "post": {
        "description": "Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user's phone number using the [accountUpdatePhone](https://docs.nuvix.in/references/cloud/client-web/account#updatePhone) endpoint. Learn more about how to [complete the verification process](https://docs.nuvix.in/references/cloud/client-web/account#updatePhoneVerification). The verification code sent to the user's phone number is valid for 15 minutes.",
        "operationId": "createPhoneVerification",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create phone verification",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10,
          "key": "ip:{ip},userId:{param-userId}"
        }
      },
      "put": {
        "description": "Use this endpoint to complete the user phone verification process. Use the **userId** and **secret** that were sent to your user's phone number to verify the user email ownership. If confirmed this route will return a 200 status code.",
        "operationId": "updatePhoneVerification",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneVerificationDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update phone verification (confirmation)",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10,
          "key": "ip:{ip},userId:{param-userId}"
        }
      }
    },
    "/v1/account/identities": {
      "get": {
        "description": "Get the list of identities for the currently logged in user.",
        "operationId": "listIdentities",
        "parameters": [
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, provider, providerUid, providerEmail, providerAccessTokenExpiry.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List identities",
        "tags": ["account"]
      }
    },
    "/v1/account/identities/{identityId}": {
      "delete": {
        "description": "Delete an identity by its unique ID.",
        "operationId": "deleteIdentity",
        "parameters": [
          {
            "name": "identityId",
            "required": true,
            "in": "path",
            "description": "Identity ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete identity",
        "tags": ["account"]
      }
    },
    "/v1/account/mfa": {
      "patch": {
        "description": "Enable or disable MFA on an account.",
        "operationId": "updateMFA",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountMfaDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update MFA",
        "tags": ["account"]
      }
    },
    "/v1/account/mfa/factors": {
      "get": {
        "description": "List the factors available on the account to be used as a MFA challange.",
        "operationId": "listMfaFactors",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFAChallengeModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List factors",
        "tags": ["account"]
      }
    },
    "/v1/account/mfa/authenticators/{type}": {
      "post": {
        "description": "Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#updateMfaAuthenticator) method.",
        "operationId": "createMfaAuthenticator",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Type of authenticator. Must be `totp`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFATypeModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create authenticator",
        "tags": ["account"]
      },
      "put": {
        "description": "Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#createMfaAuthenticator) method.",
        "operationId": "updateMfaAuthenticator",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Type of authenticator. Must be `totp`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyMfaAuthenticatorDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update authenticator (confirmation)",
        "tags": ["account"]
      },
      "delete": {
        "description": "Delete an authenticator for a user by ID.",
        "operationId": "deleteMfaAuthenticator",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Type of authenticator. Must be `totp`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete authenticator",
        "tags": ["account"]
      }
    },
    "/v1/account/mfa/recovery-codes": {
      "post": {
        "description": "Generate recovery codes as backup for MFA flow. It's recommended to generate and show then immediately after user successfully adds their authehticator. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.",
        "operationId": "createMfaRecoveryCodes",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFARecoveryCodesModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create MFA recovery codes",
        "tags": ["account"]
      },
      "patch": {
        "description": "Regenerate recovery codes that can be used as backup for MFA flow. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to regenreate recovery codes.",
        "operationId": "updateMfaRecoveryCodes",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFARecoveryCodesModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update MFA recovery codes (regenerate)",
        "tags": ["account"]
      },
      "get": {
        "description": "Get recovery codes that can be used as backup for MFA flow. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to read recovery codes.",
        "operationId": "getMfaRecoveryCodes",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFARecoveryCodesModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List MFA recovery codes",
        "tags": ["account"]
      }
    },
    "/v1/account/mfa/challenge": {
      "post": {
        "description": "Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.",
        "operationId": "createMfaChallenge",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMfaChallengeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFAChallengeModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create MFA challenge",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10,
          "key": "ip:{ip},userId:{userId}"
        }
      },
      "put": {
        "operationId": "MfaController_updateMfaChallenge_v1",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyMfaChallengeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update MFA challenge (confirmation)",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10,
          "key": "challengeId:{param-challengeId}"
        }
      }
    },
    "/v1/account/recovery": {
      "post": {
        "description": "Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](https://docs.nuvix.in/references/cloud/client-web/account#updateRecovery) endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour.",
        "operationId": "createRecovery",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecoveryDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create password recovery",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10
        }
      },
      "put": {
        "description": "Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](https://docs.nuvix.in/references/cloud/client-web/account#createRecovery) endpoint.\n\nPlease note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.",
        "operationId": "updateRecovery",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRecoveryDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update password recovery (confirmation)",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10,
          "key": "ip:{ip},userId:{param-userId}"
        }
      }
    },
    "/v1/account/sessions": {
      "get": {
        "description": "Get the list of active sessions across different devices for the currently logged in user.",
        "operationId": "listSessions",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List Sessions",
        "tags": ["account"]
      },
      "delete": {
        "description": "Delete all sessions from the user account and remove any sessions cookies from the end client.",
        "operationId": "deleteSessions",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete sessions",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 100
        }
      },
      "post": {
        "description": "Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://docs.nuvix.in/authentication-security#limits).",
        "operationId": "createEmailPasswordSession",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailSessionDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create email password session",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10,
          "key": "email:{param-email}",
          "configKey": "create_email_session"
        }
      }
    },
    "/v1/account/sessions/{sessionId}": {
      "get": {
        "description": "Use this endpoint to get a logged in user's session using a Session ID. Inputting 'current' will return the current session being used.",
        "operationId": "getSession",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get session",
        "tags": ["account"]
      },
      "delete": {
        "description": "Logout the user. Use 'current' as the session ID to logout on this device, use a session ID to logout on another device. If you're looking to logout the user on all devices, use [Delete Sessions](https://docs.nuvix.in/references/cloud/client-web/account#deleteSessions) instead.",
        "operationId": "deleteSession",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete session",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 100
        }
      },
      "patch": {
        "description": "Use this endpoint to extend a session's length. Extending a session is useful when session expiry is short. If the session was created using an OAuth provider, this endpoint refreshes the access token from the provider.",
        "operationId": "updateSession",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update session",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10
        }
      }
    },
    "/v1/account/sessions/email": {
      "post": {
        "description": "Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://docs.nuvix.in/authentication-security#limits).",
        "operationId": "createEmailPasswordSession",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailSessionDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create email password session",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10,
          "key": "email:{param-email}",
          "configKey": "create_email_session"
        }
      }
    },
    "/v1/account/sessions/anonymous": {
      "post": {
        "description": "Use this endpoint to allow a new user to register an anonymous account in your project. This route will also create a new session for the user. To allow the new user to convert an anonymous account to a normal account, you need to update its [email and password](https://docs.nuvix.in/references/cloud/client-web/account#updateEmail) or create an [OAuth2 session](https://docs.nuvix.in/references/cloud/client-web/account#CreateOAuth2Session).",
        "operationId": "createAnonymousSession",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create anonymous session",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 50,
          "key": "ip:{ip}",
          "configKey": "create_anonymous_session"
        }
      }
    },
    "/v1/account/sessions/token": {
      "post": {
        "description": "Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.",
        "operationId": "createSession",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create session",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10,
          "key": "ip:{ip},userId:{param-userId}",
          "configKey": "create_token_session"
        }
      }
    },
    "/v1/account/sessions/oauth2/{provider}": {
      "get": {
        "description": "Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Nuvix console first. Use the success and failure arguments to provide a redirect URL's back to your app when login is completed.\n\nIf there is already an active session, the new session will be attached to the logged-in account. If there are no active sessions, the server will attempt to look for a user with the same email address as the email received from the OAuth2 provider and attach the new session to the existing user. If no matching user is found - the server will create a new user.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://docs.nuvix.in/authentication-security#limits).",
        "operationId": "createOAuth2Session",
        "parameters": [
          {
            "name": "scopes",
            "required": false,
            "in": "query",
            "description": "A list of custom OAuth2 scopes. Check each provider internal docs for a list of supported scopes. Maximum of 100 scopes are allowed, each 4096 characters long.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "success",
            "required": false,
            "in": "query",
            "description": "URL to redirect back to your app after a successful login attempt.  Only URLs from hostnames in your project\\'s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.",
            "schema": {
              "format": "uri",
              "type": "string"
            }
          },
          {
            "name": "failure",
            "required": false,
            "in": "query",
            "description": "URL to redirect back to your app after a failed login attempt.  Only URLs from hostnames in your project\\'s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.",
            "schema": {
              "format": "uri",
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create OAuth2 session",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 50,
          "key": "ip:{ip}",
          "configKey": "create_oauth2_session"
        }
      }
    },
    "/v1/account/tokens/oauth2/{provider}": {
      "get": {
        "description": "Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Nuvix console first. Use the success and failure arguments to provide a redirect URL's back to your app when login is completed. \n\nIf authentication succeeds, `userId` and `secret` of a token will be appended to the success URL as query parameters. These can be used to create a new session using the [Create session](https://docs.nuvix.in/references/cloud/client-web/account#createSession) endpoint.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://docs.nuvix.in/authentication-security#limits).",
        "operationId": "createOAuth2Token",
        "parameters": [
          {
            "name": "success",
            "required": false,
            "in": "query",
            "schema": {
              "format": "uri",
              "type": "string"
            }
          },
          {
            "name": "failure",
            "required": false,
            "in": "query",
            "schema": {
              "format": "uri",
              "type": "string"
            }
          },
          {
            "name": "scopes",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create OAuth2 token",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 50,
          "key": "ip:{ip}"
        }
      }
    },
    "/v1/account/tokens/magic-url": {
      "post": {
        "description": "Sends the user an email with a secret key for creating a session. If the provided user ID has not been registered, a new user will be created. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. Use the query string parameters to submit a request to the [POST /v1/account/sessions/token](https://docs.nuvix.in/references/cloud/client-web/account#createSession) endpoint to complete the login process. The link sent to the user's email address is valid for 1 hour.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://docs.nuvix.in/authentication-security#limits).",
        "operationId": "createMagicURLToken",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMagicURLTokenDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create magic URL token",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 60
        }
      }
    },
    "/v1/account/tokens/email": {
      "post": {
        "description": "Sends the user an email with a secret key for creating a session. If the email address has never been used, a **new account is created** using the provided `userId`. Otherwise, if the email address is already attached to an account, the **user ID is ignored**. Then, the user will receive an email with the one-time password. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://docs.nuvix.in/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user's email is valid for 15 minutes.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://docs.nuvix.in/authentication-security#limits).",
        "operationId": "createEmailToken",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailTokenDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create email token(OTP)",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10
        }
      }
    },
    "/v1/account/sessions/magic-url": {
      "put": {
        "description": "Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.",
        "operationId": "updateMagicURLSession",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update magic URL session",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10,
          "key": "ip:{ip},userId:{param-userId}"
        }
      }
    },
    "/v1/account/sessions/phone": {
      "put": {
        "description": "Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.",
        "operationId": "updatePhoneSession",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update phone session",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10,
          "key": "ip:{ip},userId:{param-userId}"
        }
      },
      "post": {
        "description": "Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://docs.nuvix.in/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user's phone is valid for 15 minutes.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://docs.nuvix.in/authentication-security#limits).",
        "operationId": "createPhoneToken",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneTokenDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create phone token",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10
        }
      }
    },
    "/v1/account/tokens/phone": {
      "post": {
        "description": "Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://docs.nuvix.in/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user's phone is valid for 15 minutes.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://docs.nuvix.in/authentication-security#limits).",
        "operationId": "createPhoneToken",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneTokenDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create phone token",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 10
        }
      }
    },
    "/v1/account/jwts": {
      "post": {
        "description": "Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Nuvix server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.",
        "operationId": "createJWT",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWTModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create JWT",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 100,
          "key": "userId:{userId}"
        }
      }
    },
    "/v1/account/jwt": {
      "post": {
        "description": "Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Nuvix server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.",
        "operationId": "createJWT",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWTModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create JWT",
        "tags": ["account"],
        "x-rateLimit": {
          "limit": 100,
          "key": "userId:{userId}"
        }
      }
    },
    "/v1/account/targets/push": {
      "post": {
        "description": "Use this endpoint to register a device for push notifications. Provide a target ID (custom or generated using ID.unique()), a device identifier (usually a device token), and optionally specify which provider should send notifications to this target. The target is automatically linked to the current session and includes device information like brand and model.",
        "operationId": "createPushTarget",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePushTargetDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create push target",
        "tags": ["account"]
      }
    },
    "/v1/account/targets/{targetId}/push": {
      "put": {
        "description": "Update the currently logged in user's push notification target. You can modify the target's identifier (device token) and provider ID (token, email, phone etc.). The target must exist and belong to the current user. If you change the provider ID, notifications will be sent through the new messaging provider instead.",
        "operationId": "updatePushTarget",
        "parameters": [
          {
            "name": "targetId",
            "required": true,
            "in": "path",
            "description": "Target ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePushTargetDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update push target",
        "tags": ["account"]
      },
      "delete": {
        "description": "Delete a push notification target for the currently logged in user. After deletion, the device will no longer receive push notifications. The target must exist and belong to the current user.",
        "operationId": "deletePushTarget",
        "parameters": [
          {
            "name": "targetId",
            "required": true,
            "in": "path",
            "description": "Target ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete push target",
        "tags": ["account"]
      }
    },
    "/v1/databases/schemas": {
      "get": {
        "description": "Retrieve a list of all schemas in the database with optional filtering by type",
        "operationId": "listSchemas",
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Schema type, either managed, unmanaged or document",
            "schema": {
              "example": "managed",
              "type": "string",
              "enum": ["managed", "unmanaged", "document"]
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List schemas",
        "tags": ["database"]
      },
      "post": {
        "description": "Create a new schema in the database. Supports managed, unmanaged, and document schema types",
        "operationId": "createSchema",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create schema",
        "tags": ["database"]
      }
    },
    "/v1/database/schemas": {
      "get": {
        "description": "Retrieve a list of all schemas in the database with optional filtering by type",
        "operationId": "listSchemas",
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Schema type, either managed, unmanaged or document",
            "schema": {
              "example": "managed",
              "type": "string",
              "enum": ["managed", "unmanaged", "document"]
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List schemas",
        "tags": ["database"]
      },
      "post": {
        "description": "Create a new schema in the database. Supports managed, unmanaged, and document schema types",
        "operationId": "createSchema",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create schema",
        "tags": ["database"]
      }
    },
    "/v1/databases/schemas/{schemaId}": {
      "get": {
        "description": "Retrieve a specific schema by its ID",
        "operationId": "getSchema",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get schema",
        "tags": ["database"]
      }
    },
    "/v1/database/schemas/{schemaId}": {
      "get": {
        "description": "Retrieve a specific schema by its ID",
        "operationId": "getSchema",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get schema",
        "tags": ["database"]
      }
    },
    "/v1/avatars/initials": {
      "get": {
        "description": "Generates an avatar image with user initials based on the provided name and customization options",
        "operationId": "AvatarsController_generateAvatar_v1",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "background",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "circle",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Generate avatar with initials",
        "tags": ["avatars"]
      }
    },
    "/v1/storage/buckets": {
      "get": {
        "description": "Get a list of all the storage buckets. You can use the query params to filter your results.",
        "operationId": "listBuckets",
        "parameters": [
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: enabled, name, fileSecurity, maximumFileSize, encryption, antivirus.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter your list results. Max length: 256 chars.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List buckets",
        "tags": ["storage"]
      },
      "post": {
        "description": "Create a new storage bucket.",
        "operationId": "createBucket",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBucketDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create bucket",
        "tags": ["storage"]
      }
    },
    "/v1/storage/buckets/{bucketId}": {
      "get": {
        "description": "Get a storage bucket by its unique ID. This endpoint response returns a JSON object with the storage bucket metadata.",
        "operationId": "getBucket",
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Bucket ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get bucket",
        "tags": ["storage"]
      },
      "put": {
        "description": "Update a storage bucket by its unique ID.",
        "operationId": "updateBucket",
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Bucket ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBucketDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update bucket",
        "tags": ["storage"]
      },
      "delete": {
        "description": "Delete a storage bucket by its unique ID.",
        "operationId": "deleteBucket",
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Bucket ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete bucket",
        "tags": ["storage"]
      }
    },
    "/v1/storage/usage": {
      "get": {
        "description": "Get usage metrics and statistics for all buckets in the project. You can view the total number of buckets, files, storage usage. The response includes both current totals and historical data over time. Use the optional range parameter to specify the time window for historical data: 24h (last 24 hours), 30d (last 30 days), or 90d (last 90 days). If not specified, range defaults to 30 days.",
        "operationId": "getUsage",
        "parameters": [
          {
            "name": "range",
            "required": false,
            "in": "query",
            "description": "Date range.",
            "schema": {
              "default": "30d",
              "type": "string",
              "enum": ["24h", "30d", "90d"]
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageStorageModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get storage usage stats",
        "tags": ["storage"]
      }
    },
    "/v1/storage/{bucket}/usage": {
      "get": {
        "description": "Get usage metrics and statistics a specific bucket in the project. You can view the total number of files, storage usage. The response includes both current totals and historical data over time. Use the optional range parameter to specify the time window for historical data: 24h (last 24 hours), 30d (last 30 days), or 90d (last 90 days). If not specified, range defaults to 30 days.",
        "operationId": "getBucketUsage",
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Bucket ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "range",
            "required": false,
            "in": "query",
            "description": "Date range.",
            "schema": {
              "default": "30d",
              "type": "string",
              "enum": ["24h", "30d", "90d"]
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageBucketsModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get bucket usage stats",
        "tags": ["storage"]
      }
    },
    "/v1/storage/buckets/{bucketId}/files": {
      "get": {
        "description": "Get a list of all the user files. You can use the query params to filter your results.",
        "operationId": "getFiles",
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Bucket ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, signature, mimeType, sizeOriginal, chunksTotal, chunksUploaded.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter your list results. Max length: 256 chars.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List files",
        "tags": ["storage"]
      },
      "post": {
        "description": "Create a new file. Before using this route, you should create a new bucket resource using either a [server integration](https://docs.nuvix.in/server/storage#storageCreateBucket) API or directly from your Nuvix console.\n\nLarger files should be uploaded using multiple requests with the [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) header to send a partial request with a maximum supported chunk of `5MB`. The `content-range` header values should always be in bytes.\n\nWhen the first request is sent, the server will return the **File** object, and the subsequent part request must include the file's **id** in `x-nuvix-id` header to allow the server to know that the partial upload is for the existing file and not for a new one.\n\nIf you're creating a new file using one of the Nuvix SDKs, all the chunking logic will be managed by the SDK internally.",
        "operationId": "createFile",
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Bucket ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Multipart form data with a file field.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fileId": {
                    "type": "string",
                    "description": "File ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars."
                  },
                  "permissions": {
                    "type": "array",
                    "description": "An array of permission strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://docs.nuvix.in/permissions).",
                    "items": {
                      "type": "string"
                    }
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["fileId", "file"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create file",
        "tags": ["storage"],
        "x-rateLimit": {
          "limit": 60,
          "ttl": 60,
          "configKey": "bucket_files_create"
        }
      }
    },
    "/v1/storage/buckets/{bucketId}/files/{fileId}": {
      "get": {
        "description": "Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.",
        "operationId": "getFile",
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Bucket ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "required": true,
            "in": "path",
            "description": "The file ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get file",
        "tags": ["storage"]
      },
      "put": {
        "description": "Update a file by its unique ID. Only users with write permissions have access to update this resource.",
        "operationId": "updateFile",
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Bucket ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "required": true,
            "in": "path",
            "description": "The file ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFileDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update file",
        "tags": ["storage"],
        "x-rateLimit": {
          "limit": 60,
          "ttl": 60,
          "configKey": "bucket_files_update"
        }
      },
      "delete": {
        "description": "Delete a file by its unique ID. Only users with write permissions have access to delete this resource.",
        "operationId": "deleteFile",
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Bucket ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "required": true,
            "in": "path",
            "description": "The file ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NONE"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete file",
        "tags": ["storage"],
        "x-rateLimit": {
          "limit": 60,
          "ttl": 60,
          "configKey": "bucket_files_delete"
        }
      }
    },
    "/v1/storage/buckets/{bucketId}/files/{fileId}/preview": {
      "get": {
        "description": "Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. Preview is supported only for image files smaller than 10MB.",
        "operationId": "getFilePreview",
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Bucket ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "required": true,
            "in": "path",
            "description": "The file ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "required": false,
            "in": "query",
            "description": "Resize preview image width, Pass an integer between 0 to 4000.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "required": false,
            "in": "query",
            "description": "Resize preview image height, Pass an integer between 0 to 4000.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gravity",
            "required": false,
            "in": "query",
            "description": "Image crop gravity. Can be one of center, top-left, top, top-right, left, right, bottom-left, bottom, bottom-right",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quality",
            "required": false,
            "in": "query",
            "description": "Preview image quality. Pass an integer between 0 to 100. Defaults to keep existing image quality.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "borderWidth",
            "required": false,
            "in": "query",
            "description": "Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "borderColor",
            "required": false,
            "in": "query",
            "description": "Preview image border color. Use a valid HEX color, no # is needed for prefix.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "borderRadius",
            "required": false,
            "in": "query",
            "description": "Preview image border radius in pixels. Pass an integer between 0 to 4000.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "opacity",
            "required": false,
            "in": "query",
            "description": "Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rotation",
            "required": false,
            "in": "query",
            "description": "Preview image rotation in degrees. Pass an integer between -360 and 360.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "background",
            "required": false,
            "in": "query",
            "description": "Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "output",
            "required": false,
            "in": "query",
            "description": "Output format type (jpeg, jpg, png, gif and webp).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file preview as binary stream",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "image/webp": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get file preview",
        "tags": ["storage"]
      }
    },
    "/v1/storage/buckets/{bucketId}/files/{fileId}/download": {
      "get": {
        "description": "Get a file content by its unique ID. The endpoint response return with a 'Content-Disposition: attachment' header that tells the browser to start downloading the file to user downloads directory.",
        "operationId": "getFileDownload",
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Bucket ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "required": true,
            "in": "path",
            "description": "The file ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file as binary stream",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": "Partial content (range requests)",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get file for download",
        "tags": ["storage"]
      }
    },
    "/v1/storage/buckets/{bucketId}/files/{fileId}/view": {
      "get": {
        "description": "Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  'Content-Disposition: attachment' header.",
        "operationId": "getFileView",
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Bucket ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "required": true,
            "in": "path",
            "description": "The file ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file as binary stream",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": "Partial content (range requests)",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get file for view",
        "tags": ["storage"]
      }
    },
    "/v1/storage/buckets/{bucketId}/files/{fileId}/push": {
      "get": {
        "operationId": "FilesController_getFileForPushNotification_v1",
        "parameters": [
          {
            "name": "bucketId",
            "required": true,
            "in": "path",
            "description": "Bucket ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "required": true,
            "in": "path",
            "description": "The file ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jwt",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get file for push notification",
        "tags": ["storage"]
      }
    },
    "/v1/schemas/{schemaId}/{tableId}": {
      "get": {
        "description": "Retrieve data from a specific table with optional pagination",
        "operationId": "SchemasController_queryTable[0]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Query table data",
        "tags": ["schemas"]
      },
      "post": {
        "description": "Insert one or more records into a specific table",
        "operationId": "SchemasController_insertIntoTable[0]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columns",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Insert data into table",
        "tags": ["schemas"]
      },
      "patch": {
        "description": "Update existing records in a specific table with optional pagination and force flag",
        "operationId": "SchemasController_updateTables[0]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columns",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "force",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update table data",
        "tags": ["schemas"]
      },
      "delete": {
        "description": "Delete records from a specific table with optional pagination and force flag",
        "operationId": "SchemasController_deleteTables[0]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "force",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete table data",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/tables/{tableId}": {
      "get": {
        "description": "Retrieve data from a specific table with optional pagination",
        "operationId": "SchemasController_queryTable[1]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Query table data",
        "tags": ["schemas"]
      },
      "post": {
        "description": "Insert one or more records into a specific table",
        "operationId": "SchemasController_insertIntoTable[1]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columns",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Insert data into table",
        "tags": ["schemas"]
      },
      "patch": {
        "description": "Update existing records in a specific table with optional pagination and force flag",
        "operationId": "SchemasController_updateTables[1]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columns",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "force",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update table data",
        "tags": ["schemas"]
      },
      "delete": {
        "description": "Delete records from a specific table with optional pagination and force flag",
        "operationId": "SchemasController_deleteTables[1]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "force",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete table data",
        "tags": ["schemas"]
      }
    },
    "/v1/public/{tableId}": {
      "get": {
        "description": "Retrieve data from a specific table with optional pagination",
        "operationId": "SchemasController_queryTable[2]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Query table data",
        "tags": ["schemas"]
      },
      "post": {
        "description": "Insert one or more records into a specific table",
        "operationId": "SchemasController_insertIntoTable[2]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columns",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Insert data into table",
        "tags": ["schemas"]
      },
      "patch": {
        "description": "Update existing records in a specific table with optional pagination and force flag",
        "operationId": "SchemasController_updateTables[2]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columns",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "force",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update table data",
        "tags": ["schemas"]
      },
      "delete": {
        "description": "Delete records from a specific table with optional pagination and force flag",
        "operationId": "SchemasController_deleteTables[2]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "force",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete table data",
        "tags": ["schemas"]
      }
    },
    "/v1/public/tables/{tableId}": {
      "get": {
        "description": "Retrieve data from a specific table with optional pagination",
        "operationId": "SchemasController_queryTable[3]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Query table data",
        "tags": ["schemas"]
      },
      "post": {
        "description": "Insert one or more records into a specific table",
        "operationId": "SchemasController_insertIntoTable[3]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columns",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Insert data into table",
        "tags": ["schemas"]
      },
      "patch": {
        "description": "Update existing records in a specific table with optional pagination and force flag",
        "operationId": "SchemasController_updateTables[3]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columns",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "force",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update table data",
        "tags": ["schemas"]
      },
      "delete": {
        "description": "Delete records from a specific table with optional pagination and force flag",
        "operationId": "SchemasController_deleteTables[3]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "force",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete table data",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/fn/{functionId}": {
      "post": {
        "description": "Execute a stored procedure or function in the database",
        "operationId": "rpc",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "functionId",
            "required": true,
            "in": "path",
            "description": "Function ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Call database function",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/rpc/{functionId}": {
      "post": {
        "description": "Execute a stored procedure or function in the database",
        "operationId": "rpc",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "functionId",
            "required": true,
            "in": "path",
            "description": "Function ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Call database function",
        "tags": ["schemas"]
      }
    },
    "/v1/public/fn/{functionId}": {
      "post": {
        "description": "Execute a stored procedure or function in the database",
        "operationId": "rpc",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "functionId",
            "required": true,
            "in": "path",
            "description": "Function ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Call database function",
        "tags": ["schemas"]
      }
    },
    "/v1/public/rpc/{functionId}": {
      "post": {
        "description": "Execute a stored procedure or function in the database",
        "operationId": "rpc",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "functionId",
            "required": true,
            "in": "path",
            "description": "Function ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Call database function",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/tables/{tableId}/permissions": {
      "put": {
        "description": "Manage permissions for a specific table",
        "operationId": "SchemasController_manageTablePermissions[0]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update table permissions",
        "tags": ["schemas"]
      },
      "get": {
        "description": "Retrieve permissions for a specific table",
        "operationId": "SchemasController_getTablePermissions[0]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get table permissions",
        "tags": ["schemas"]
      }
    },
    "/v1/public/tables/{tableId}/permissions": {
      "put": {
        "description": "Manage permissions for a specific table",
        "operationId": "SchemasController_manageTablePermissions[1]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update table permissions",
        "tags": ["schemas"]
      },
      "get": {
        "description": "Retrieve permissions for a specific table",
        "operationId": "SchemasController_getTablePermissions[1]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get table permissions",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/tables/{tableId}/{rowId}/permissions": {
      "put": {
        "description": "Manage permissions for a specific row in a table",
        "operationId": "SchemasController_manageRowPermissions[0]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rowId",
            "required": true,
            "in": "path",
            "description": "Row ID. (See [Schemas](https://docs.nuvix.in/schemas/managed-schema#_id))",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update row permissions",
        "tags": ["schemas"]
      },
      "get": {
        "description": "Retrieve permissions for a specific row in a table",
        "operationId": "SchemasController_getRowPermissions[0]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rowId",
            "required": true,
            "in": "path",
            "description": "Row ID. (See [Schemas](https://docs.nuvix.in/schemas/managed-schema#_id))",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get row permissions",
        "tags": ["schemas"]
      }
    },
    "/v1/public/tables/{tableId}/{rowId}/permissions": {
      "put": {
        "description": "Manage permissions for a specific row in a table",
        "operationId": "SchemasController_manageRowPermissions[1]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rowId",
            "required": true,
            "in": "path",
            "description": "Row ID. (See [Schemas](https://docs.nuvix.in/schemas/managed-schema#_id))",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update row permissions",
        "tags": ["schemas"]
      },
      "get": {
        "description": "Retrieve permissions for a specific row in a table",
        "operationId": "SchemasController_getRowPermissions[1]_v1",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "default": "public",
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "Table ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rowId",
            "required": true,
            "in": "path",
            "description": "Row ID. (See [Schemas](https://docs.nuvix.in/schemas/managed-schema#_id))",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get row permissions",
        "tags": ["schemas"]
      }
    },
    "/v1/messaging/messages/email": {
      "post": {
        "description": "Create a new email message.",
        "operationId": "createEmail",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailMessageDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create email",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/messages/sms": {
      "post": {
        "description": "Create a new SMS message.",
        "operationId": "createSms",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSmsMessageDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create SMS",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/messages/push": {
      "post": {
        "description": "Create a new push notification.",
        "operationId": "createPush",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePushMessageDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create push notification",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/messages": {
      "get": {
        "description": "Get a list of all messages from the current Nuvix project.",
        "operationId": "listMessages",
        "parameters": [
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: scheduledAt, deliveredAt, deliveredTotal, status, description, providerType.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter your list results. Max length: 256 chars.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List messages",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/messages/{messageId}": {
      "get": {
        "description": "Get a message by its unique ID.",
        "operationId": "getMessage",
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "description": "Message ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get message",
        "tags": ["messaging"]
      },
      "delete": {
        "description": "Delete a message. If the message is not a draft or scheduled, but has been sent, this will not recall the message.",
        "operationId": "delete",
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "description": "Message ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete message",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/messages/{messageId}/targets": {
      "get": {
        "description": "Get a list of the targets associated with a message.",
        "operationId": "listTargets",
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "description": "Message ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, providerId, identifier, providerType.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List message targets",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/messages/email/{messageId}": {
      "patch": {
        "description": "Update an email message by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.",
        "operationId": "updateEmail",
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "description": "Message ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailMessageDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update email",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/messages/sms/{messageId}": {
      "patch": {
        "description": "Update an SMS message by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.",
        "operationId": "updateSms",
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "description": "Message ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSmsMessageDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update SMS",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/messages/push/{messageId}": {
      "patch": {
        "description": "Update a push notification by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.",
        "operationId": "updatePush",
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "description": "Message ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePushMessageDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update push notification",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/mailgun": {
      "post": {
        "description": "Create a new Mailgun provider.",
        "operationId": "createMailgunProvider",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMailgunProviderDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create Mailgun provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/sendgrid": {
      "post": {
        "description": "Create a new Sendgrid provider.",
        "operationId": "createSendgridProvider",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSendgridProviderDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create Sendgrid provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/smtp": {
      "post": {
        "description": "Create a new SMTP provider.",
        "operationId": "createSmtpProvider",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSMTPProviderDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create SMTP provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/msg91": {
      "post": {
        "description": "Create a new MSG91 provider.",
        "operationId": "createMsg91Provider",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMsg91ProviderDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create Msg91 provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/telesign": {
      "post": {
        "description": "Create a new Telesign provider.",
        "operationId": "createTelesignProvider",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTelesignProviderDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create Telesign provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/textmagic": {
      "post": {
        "description": "Create a new Textmagic provider.",
        "operationId": "createTextmagicProvider",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTextmagicProviderDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create Textmagic provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/twilio": {
      "post": {
        "description": "Create a new Twilio provider.",
        "operationId": "createTwilioProvider",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTwilioProviderDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create Twilio provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/vonage": {
      "post": {
        "description": "Create a new Vonage provider.",
        "operationId": "createVonageProvider",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVonageProviderDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create Vonage provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/fcm": {
      "post": {
        "description": "Create a new Firebase Cloud Messaging provider.",
        "operationId": "createFcmProvider",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFcmProviderDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create FCM provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/apns": {
      "post": {
        "description": "Create a new Apple Push Notification service provider.",
        "operationId": "createApnsProvider",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApnsProviderDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create APNS provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers": {
      "get": {
        "description": "Get a list of all providers from the current Nuvix project.",
        "operationId": "listProviders",
        "parameters": [
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, provider, type, enabled.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter your list results. Max length: 256 chars.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List providers",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/{providerId}": {
      "get": {
        "description": "Get a provider by its unique ID.",
        "operationId": "getProvider",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "description": "Provider ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get provider",
        "tags": ["messaging"]
      },
      "delete": {
        "description": "Delete a provider by its unique ID.",
        "operationId": "deleteProvider",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "description": "Provider ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/mailgun/{providerId}": {
      "patch": {
        "description": "Update a Mailgun provider by its unique ID.",
        "operationId": "updateMailgunProvider",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "description": "Provider ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMailgunProviderDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update Mailgun provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/sendgrid/{providerId}": {
      "patch": {
        "description": "Update a Sendgrid provider by its unique ID.",
        "operationId": "updateSendgridProvider",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "description": "Provider ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSendgridProviderDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update Sendgrid provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/smtp/{providerId}": {
      "patch": {
        "description": "Update a SMTP provider by its unique ID.",
        "operationId": "updateSmtpProvider",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "description": "Provider ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSMTPProviderDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update SMTP provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/msg91/{providerId}": {
      "patch": {
        "description": "Update a MSG91 provider by its unique ID.",
        "operationId": "updateMsg91Provider",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "description": "Provider ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMsg91ProviderDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update Msg91 provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/telesign/{providerId}": {
      "patch": {
        "description": "Update a Telesign provider by its unique ID.",
        "operationId": "updateTelesignProvider",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "description": "Provider ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTelesignProviderDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update Telesign provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/textmagic/{providerId}": {
      "patch": {
        "description": "Update a Textmagic provider by its unique ID.",
        "operationId": "updateTextmagicProvider",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "description": "Provider ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTextmagicProviderDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update Textmagic provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/twilio/{providerId}": {
      "patch": {
        "description": "Update a Twilio provider by its unique ID.",
        "operationId": "updateTwilioProvider",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "description": "Provider ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTwilioProviderDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update Twilio provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/vonage/{providerId}": {
      "patch": {
        "description": "Update a Vonage provider by its unique ID.",
        "operationId": "updateVonageProvider",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "description": "Provider ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVonageProviderDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update Vonage provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/fcm/{providerId}": {
      "patch": {
        "description": "Update a Firebase Cloud Messaging provider by its unique ID.",
        "operationId": "updateFcmProvider",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "description": "Provider ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFcmProviderDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update FCM provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/providers/apns/{providerId}": {
      "patch": {
        "description": "Update a Apple Push Notification service provider by its unique ID.",
        "operationId": "updateApnsProvider",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "description": "Provider ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApnsProviderDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update APNS provider",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/topics": {
      "post": {
        "description": "Create a new topic.",
        "operationId": "createTopic",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTopicDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create topic",
        "tags": ["messaging"]
      },
      "get": {
        "description": "Get a list of all topics from the current Nuvix project.",
        "operationId": "listTopics",
        "parameters": [
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, description, emailTotal, smsTotal, pushTotal.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter your list results. Max length: 256 chars.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List topics",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/topics/{topicId}": {
      "get": {
        "description": "Get a topic by its unique ID.",
        "operationId": "getTopic",
        "parameters": [
          {
            "name": "topicId",
            "required": true,
            "in": "path",
            "description": "Topic ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get topic",
        "tags": ["messaging"]
      },
      "patch": {
        "description": "Update a topic by its unique ID.",
        "operationId": "updateTopic",
        "parameters": [
          {
            "name": "topicId",
            "required": true,
            "in": "path",
            "description": "Topic ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTopicDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update topic",
        "tags": ["messaging"]
      },
      "delete": {
        "description": "Delete a topic by its unique ID.",
        "operationId": "deleteTopic",
        "parameters": [
          {
            "name": "topicId",
            "required": true,
            "in": "path",
            "description": "Topic ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete topic",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/topics/{topicId}/subscribers": {
      "post": {
        "description": "Create a new subscriber.",
        "operationId": "createSubscriber",
        "parameters": [
          {
            "name": "topicId",
            "required": true,
            "in": "path",
            "description": "Topic ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create subscriber",
        "tags": ["messaging"]
      },
      "get": {
        "description": "Get a list of all subscribers from the current Nuvix project.",
        "operationId": "listSubscribers",
        "parameters": [
          {
            "name": "topicId",
            "required": true,
            "in": "path",
            "description": "Topic ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: targetId, topicId, userId, providerType.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter your list results. Max length: 256 chars.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List subscribers",
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/topics/{topicId}/subscribers/{subscriberId}": {
      "get": {
        "description": "Get a subscriber by its unique ID.",
        "operationId": "getSubscriber",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get subscriber",
        "tags": ["messaging"]
      },
      "delete": {
        "description": "Delete a subscriber by its unique ID.",
        "operationId": "deleteSubscriber",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete subscriber",
        "tags": ["messaging"]
      }
    },
    "/": {
      "get": {
        "operationId": "AppController_main",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "tags": ["App"]
      }
    },
    "/favicon.ico": {
      "get": {
        "operationId": "AppController_getFavicon",
        "parameters": [
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "tags": ["App"]
      }
    },
    "/v1/schemas/{schemaId}/collections": {
      "get": {
        "description": "Get a list of all collections that belong to the provided databaseId. You can use the search parameter to filter your results.",
        "operationId": "listCollections",
        "parameters": [
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, enabled, documentSecurity.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter your list results. Max length: 256 chars.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List collections",
        "tags": ["schemas"]
      },
      "post": {
        "description": "Create a new Collection. Before using this route, you should create a new database resource using either a [server integration](https://docs.nuvix.in/server/databases#databasesCreateCollection) API or directly from your database console.",
        "operationId": "createCollection",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollectionDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create collection",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}": {
      "get": {
        "description": "Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.",
        "operationId": "getCollection",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get collection",
        "tags": ["schemas"]
      },
      "put": {
        "description": "Update a collection by its unique ID.",
        "operationId": "updateCollection",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCollectionDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update collection",
        "tags": ["schemas"]
      },
      "delete": {
        "description": "Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.",
        "operationId": "deleteCollection",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete collection",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/usage": {
      "get": {
        "description": "Get usage metrics and statistics for a collection. Returning the total number of documents. The response includes both current totals and historical data over time. Use the optional range parameter to specify the time window for historical data: 24h (last 24 hours), 30d (last 30 days), or 90d (last 90 days). If not specified, range defaults to 30 days.",
        "operationId": "getCollectionUsage",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "range",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageCollectionModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get collection usage stats",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes": {
      "get": {
        "description": "List attributes in the collection.",
        "operationId": "listAttributes",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: key, type, size, required, array, status, error.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List attributes",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/string": {
      "post": {
        "description": "Create a string attribute.",
        "operationId": "createStringAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStringAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeStringModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create string attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/email": {
      "post": {
        "description": "Create an email attribute.",
        "operationId": "createEmailAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeEmailModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create email attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/enum": {
      "post": {
        "description": "Create an enumeration attribute. The `elements` param acts as a white-list of accepted values for this attribute.",
        "operationId": "createEnumAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnumAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeEnumModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create enum attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/ip": {
      "post": {
        "description": "Create IP address attribute.",
        "operationId": "createIpAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIpAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeIPModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create IP address attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/url": {
      "post": {
        "description": "Create a URL attribute.",
        "operationId": "createUrlAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateURLAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeURLModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create URL attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/integer": {
      "post": {
        "description": "Create an integer attribute. Optionally, minimum and maximum values can be provided.",
        "operationId": "createIntegerAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIntegerAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeIntegerModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create integer attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/float": {
      "post": {
        "description": "Create a float attribute. Optionally, minimum and maximum values can be provided.",
        "operationId": "createFloatAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFloatAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeFloatModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create float attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/boolean": {
      "post": {
        "description": "Create a boolean attribute.",
        "operationId": "createBooleanAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBooleanAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeBooleanModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create boolean attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/datetime": {
      "post": {
        "description": "Create a date time attribute according to the ISO 8601 standard.",
        "operationId": "createDatetimeAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatetimeAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeDatetimeModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create datetime attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/timestamptz": {
      "post": {
        "description": "Create a date time attribute according to the ISO 8601 standard.",
        "operationId": "createDatetimeAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatetimeAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeDatetimeModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create datetime attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/relationship": {
      "post": {
        "description": "Create relationship attribute. [Learn more about relationship attributes](https://docs.nuvix.in/databases-relationships#relationship-attributes).",
        "operationId": "createRelationshipAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeRelationshipModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create relationship attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/{key}": {
      "get": {
        "description": "Get attribute by ID.",
        "operationId": "getAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Attribute Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get attribute",
        "tags": ["schemas"]
      },
      "delete": {
        "description": "Deletes an attribute.",
        "operationId": "deleteAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Attribute Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/string/{key}": {
      "patch": {
        "description": "Update a string attribute. Changing the `default` value will not update already existing documents.",
        "operationId": "updateStringAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Attribute Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStringAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeStringModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update string attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/email/{key}": {
      "patch": {
        "description": "Update an email attribute. Changing the `default` value will not update already existing documents.",
        "operationId": "updateEmailAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Attribute Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeEmailModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update email attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/enum/{key}": {
      "patch": {
        "description": "Update an enum attribute. Changing the `default` value will not update already existing documents.",
        "operationId": "updateEnumAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Attribute Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnumAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeEnumModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update enum attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/ip/{key}": {
      "patch": {
        "description": "Update an ip attribute. Changing the `default` value will not update already existing documents.",
        "operationId": "updateIpAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Attribute Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIpAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeIPModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update IP address attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/url/{key}": {
      "patch": {
        "description": "Update an url attribute. Changing the `default` value will not update already existing documents.",
        "operationId": "updateUrlAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Attribute Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateURLAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeURLModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update URL attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/integer/{key}": {
      "patch": {
        "description": "Update an integer attribute. Changing the `default` value will not update already existing documents.",
        "operationId": "updateIntegerAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Attribute Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIntegerAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeIntegerModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update integer attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/float/{key}": {
      "patch": {
        "description": "Update a float attribute. Changing the `default` value will not update already existing documents.",
        "operationId": "updateFloatAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Attribute Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFloatAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeFloatModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update float attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/boolean/{key}": {
      "patch": {
        "description": "Update a boolean attribute. Changing the `default` value will not update already existing documents.",
        "operationId": "updateBooleanAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Attribute Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBooleanAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeBooleanModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update boolean attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/datetime/{key}": {
      "patch": {
        "description": "Update a date time attribute. Changing the `default` value will not update already existing documents.",
        "operationId": "updateDatetimeAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Attribute Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatetimeAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeDatetimeModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update DateTime attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/timestamptz/{key}": {
      "patch": {
        "description": "Update a date time attribute. Changing the `default` value will not update already existing documents.",
        "operationId": "updateDatetimeAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Attribute Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatetimeAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeDatetimeModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update DateTime attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/attributes/relationship/{key}": {
      "patch": {
        "description": "Update relationship attribute. [Learn more about relationship attributes](https://docs.nuvix.in/databases-relationships#relationship-attributes).",
        "operationId": "updateRelationshipAttribute",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Attribute Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationAttributeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeRelationshipModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update relationship attribute",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/indexes": {
      "post": {
        "description": "Creates an index on the attributes listed. Your index should include all the attributes you will query in a single request.\nAttributes can be `key`, `fulltext`, and `unique`.",
        "operationId": "createIndex",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIndexDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create index",
        "tags": ["schemas"]
      },
      "get": {
        "description": "List indexes in the collection.",
        "operationId": "listIndexes",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: key, type, status, attributes, error.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List indexes",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/indexes/{key}": {
      "get": {
        "description": "Get index by ID.",
        "operationId": "getIndex",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Index Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get index",
        "tags": ["schemas"]
      },
      "delete": {
        "description": "Delete an index.",
        "operationId": "deleteIndex",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Index Key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete index",
        "tags": ["schemas"]
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/documents": {
      "get": {
        "description": "Get a list of all the user's documents in a given collection. You can use the query params to filter your results.",
        "operationId": "listDocuments",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: .",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/"
                      }
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "List documents",
        "tags": ["schemas"]
      },
      "post": {
        "description": "Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://docs.nuvix.in/server/databases#databasesCreateCollection) API or directly from your database console.",
        "operationId": "createDocument",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDocumentDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Create document",
        "tags": ["schemas"],
        "x-rateLimit": {
          "limit": 120,
          "ttl": 60
        }
      }
    },
    "/v1/schemas/{schemaId}/collections/{collectionId}/documents/{documentId}": {
      "get": {
        "description": "Get a document by its unique ID. This endpoint response returns a JSON object with the document data.",
        "operationId": "getDocument",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "required": true,
            "in": "path",
            "description": "Document ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queries",
            "required": false,
            "in": "query",
            "description": "Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://docs.nuvix.in/database/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: .",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Get document",
        "tags": ["schemas"]
      },
      "patch": {
        "description": "Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.",
        "operationId": "updateDocument",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "required": true,
            "in": "path",
            "description": "Document ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDocumentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModel"
                }
              }
            }
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Update document",
        "tags": ["schemas"],
        "x-rateLimit": {
          "limit": 120,
          "ttl": 60
        }
      },
      "delete": {
        "description": "Delete a document by its unique ID.",
        "operationId": "deleteDocument",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "description": "Collection ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "required": true,
            "in": "path",
            "description": "Document ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaId",
            "required": true,
            "in": "path",
            "description": "Schema ID. (See [Schemas](https://docs.nuvix.in/schemas)).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Nuvix-Project",
            "in": "header",
            "required": true,
            "description": "Project ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "5XX": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  },
                  "required": ["code", "type", "message", "version"]
                }
              }
            }
          }
        },
        "summary": "Delete document",
        "tags": ["schemas"],
        "x-rateLimit": {
          "limit": 60,
          "ttl": 60
        }
      }
    }
  },
  "info": {
    "title": "Nuvix API",
    "description": "A powerful Backend for your next project",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "nuvix",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "cookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "session"
      }
    },
    "schemas": {
      "CreateUserDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "password": {
            "type": "string",
            "description": "Plain text user password. Must be at least 8 chars.",
            "minLength": 8
          },
          "name": {
            "type": "string",
            "description": "User name. Max length: 128 chars.",
            "minLength": 1,
            "maxLength": 128
          }
        }
      },
      "TargetModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Target Name.",
            "default": ""
          },
          "userId": {
            "type": "string",
            "default": ""
          },
          "providerId": {
            "type": "string",
            "default": ""
          },
          "providerType": {
            "type": "string",
            "default": ""
          },
          "identifier": {
            "type": "string",
            "default": ""
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "userId",
          "providerId",
          "providerType",
          "identifier",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "UserModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User name."
          },
          "password": {
            "type": "string",
            "description": "Hashed user password."
          },
          "hash": {
            "type": "string",
            "description": "Password hashing algorithm.",
            "default": ""
          },
          "hashOptions": {
            "type": "object",
            "description": "Password hashing algorithm configuration."
          },
          "registration": {
            "format": "date-time",
            "type": "string",
            "description": "User registration date in ISO 8601 format."
          },
          "status": {
            "type": "boolean",
            "description": "User status. Pass `true` for enabled and `false` for disabled."
          },
          "labels": {
            "description": "Labels for the user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "passwordUpdate": {
            "format": "date-time",
            "type": "string",
            "description": "Password update time in ISO 8601 format."
          },
          "email": {
            "type": "string",
            "description": "User email address."
          },
          "phone": {
            "type": "string",
            "description": "User phone number in E.164 format.",
            "default": ""
          },
          "emailVerification": {
            "type": "boolean",
            "description": "Email verification status."
          },
          "phoneVerification": {
            "type": "boolean",
            "description": "Phone verification status."
          },
          "mfa": {
            "type": "boolean",
            "description": "Multi factor authentication status."
          },
          "prefs": {
            "type": "object",
            "description": "User preferences as a key-value object"
          },
          "targets": {
            "description": "A user-owned message receiver. A single user may have multiple e.g. emails, phones, and a browser. Each target is registered with a single provider.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetModel"
            }
          },
          "accessedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Most recent access date in ISO 8601 format. This attribute is only updated again after 24 hours."
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "registration",
          "status",
          "labels",
          "passwordUpdate",
          "email",
          "phone",
          "emailVerification",
          "phoneVerification",
          "mfa",
          "prefs",
          "targets",
          "accessedAt",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "CreateUserWithShaDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "password": {
            "type": "string",
            "description": "Plain text user password. Must be at least 8 chars.",
            "minLength": 8
          },
          "name": {
            "type": "string",
            "description": "User name. Max length: 128 chars.",
            "minLength": 1,
            "maxLength": 128
          },
          "passwordVersion": {
            "type": "string",
            "description": "Optional SHA version used to hash password. Allowed values are: 'sha1', 'sha224', 'sha256', 'sha384', 'sha512/224', 'sha512/256', 'sha512', 'sha3-224', 'sha3-256', 'sha3-384', 'sha3-512'",
            "pattern": "/^(sha1|sha224|sha256|sha384|sha512\\/224|sha512\\/256|sha512|sha3-224|sha3-256|sha3-384|sha3-512)$/"
          }
        }
      },
      "CreateUserWithScryptDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "password": {
            "type": "string",
            "description": "Plain text user password. Must be at least 8 chars.",
            "minLength": 8
          },
          "name": {
            "type": "string",
            "description": "User name. Max length: 128 chars.",
            "minLength": 1,
            "maxLength": 128
          },
          "passwordSalt": {
            "type": "string",
            "description": "Optional salt used to hash password.",
            "minLength": 1,
            "maxLength": 128
          },
          "passwordCpu": {
            "type": "number",
            "description": "Optional CPU cost used to hash password."
          },
          "passwordMemory": {
            "type": "number",
            "description": "Optional memory cost used to hash password."
          },
          "passwordParallel": {
            "type": "number",
            "description": "Optional parallelization cost used to hash password."
          },
          "passwordLength": {
            "type": "number",
            "description": "Optional hash length used to hash password."
          }
        }
      },
      "CreateUserWithScryptModifedDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "password": {
            "type": "string",
            "description": "Plain text user password. Must be at least 8 chars.",
            "minLength": 8
          },
          "name": {
            "type": "string",
            "description": "User name. Max length: 128 chars.",
            "minLength": 1,
            "maxLength": 128
          },
          "passwordSalt": {
            "type": "string",
            "description": "Salt used to hash password.",
            "minLength": 1,
            "maxLength": 128
          },
          "passwordSaltSeparator": {
            "type": "string",
            "description": "Salt separator used to hash password.",
            "minLength": 1,
            "maxLength": 128
          },
          "passwordSignerKey": {
            "type": "string",
            "description": "Signer key used to hash password.",
            "minLength": 1,
            "maxLength": 128
          }
        }
      },
      "UsageUsersModel": {
        "type": "object",
        "properties": {
          "range": {
            "type": "string",
            "default": ""
          },
          "usersTotal": {
            "type": "number",
            "default": 0
          },
          "sessionsTotal": {
            "type": "number",
            "default": 0
          },
          "users": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "sessions": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "range",
          "usersTotal",
          "sessionsTotal",
          "users",
          "sessions",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "IdentityModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID.",
            "default": ""
          },
          "provider": {
            "type": "string",
            "description": "Identity Provider.",
            "default": ""
          },
          "providerUid": {
            "type": "string",
            "description": "ID of the User in the Identity Provider.",
            "default": ""
          },
          "providerEmail": {
            "type": "string",
            "description": "Email of the User in the Identity Provider.",
            "default": ""
          },
          "providerAccessToken": {
            "type": "string",
            "description": "Identity Provider Access Token.",
            "default": ""
          },
          "providerAccessTokenExpiry": {
            "type": "string",
            "description": "The date of when the access token expires in ISO 8601 format."
          },
          "providerRefreshToken": {
            "type": "string",
            "default": ""
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "userId",
          "provider",
          "providerUid",
          "providerEmail",
          "providerAccessToken",
          "providerAccessTokenExpiry",
          "providerRefreshToken",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "NONE": {
        "type": "object",
        "properties": {}
      },
      "PREFERENCES": {
        "type": "object",
        "properties": {}
      },
      "UpdateUserPrefsDTO": {
        "type": "object",
        "properties": {
          "prefs": {
            "type": "object",
            "description": "Prefs key-value JSON object."
          }
        }
      },
      "UpdateUserStatusDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "User Status. To activate the user pass `true` and to block the user pass `false`."
          }
        },
        "required": ["status"]
      },
      "UpdateUserLabelDTO": {
        "type": "object",
        "properties": {
          "labels": {
            "description": "Array of user labels. Replaces the previous labels. Maximum of 100 labels are allowed, each up to 36 alphanumeric characters long.",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "/^[a-zA-Z0-9]{1,36}$/"
            }
          }
        }
      },
      "UpdateUserNameDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User name. Max length: 128 chars.",
            "minLength": 1,
            "maxLength": 128
          }
        },
        "required": ["name"]
      },
      "UpdateUserPasswordDTO": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "New user password. Must be at least 8 chars.",
            "minLength": 8
          }
        },
        "required": ["password"]
      },
      "UpdateUserEmailDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          }
        },
        "required": ["email"]
      },
      "UpdateUserPhoneDTO": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "User phone number."
          }
        },
        "required": ["phone"]
      },
      "CreateJwtDTO": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "Session ID. Use the string \\'recent\\' to use the most recent session. Defaults to the most recent session.",
            "default": "recent"
          },
          "duration": {
            "type": "number",
            "description": "Time in seconds before JWT expires. Default duration is 900 seconds, and maximum is 3600 seconds.",
            "default": 900,
            "minimum": 0,
            "maximum": 3600
          }
        },
        "required": ["duration"]
      },
      "JWTModel": {
        "type": "object",
        "properties": {
          "jwt": {
            "type": "string",
            "description": "JWT encoded string.",
            "default": ""
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": ["jwt", "$id", "$createdAt", "$updatedAt", "$permissions"]
      },
      "MembershipModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID.",
            "default": ""
          },
          "userName": {
            "type": "string",
            "description": "User name.",
            "default": ""
          },
          "userEmail": {
            "type": "string",
            "description": "User email address.",
            "default": ""
          },
          "teamId": {
            "type": "string",
            "description": "Team ID.",
            "default": ""
          },
          "teamName": {
            "type": "string",
            "description": "Team name.",
            "default": ""
          },
          "invited": {
            "type": "string",
            "description": "Date the user has been invited to join the team in ISO 8601 format."
          },
          "joined": {
            "type": "string"
          },
          "confirm": {
            "type": "boolean",
            "default": false
          },
          "mfa": {
            "type": "boolean",
            "description": "Multi-factor authentication status, true if the user has MFA enabled or false otherwise.",
            "default": false
          },
          "roles": {
            "description": "User list of roles.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "userId",
          "userName",
          "userEmail",
          "teamId",
          "teamName",
          "invited",
          "joined",
          "confirm",
          "mfa",
          "roles",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "CreateTokenDTO": {
        "type": "object",
        "properties": {
          "length": {
            "type": "number",
            "description": "Token length in characters. The default length is 6 characters",
            "default": 6,
            "minimum": 4,
            "maximum": 128
          },
          "expire": {
            "type": "number",
            "description": "Token expiration period in seconds.",
            "minimum": 60
          }
        },
        "required": ["length", "expire"]
      },
      "TokenModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID.",
            "default": ""
          },
          "secret": {
            "type": "string",
            "default": ""
          },
          "expire": {
            "type": "string",
            "default": ""
          },
          "phrase": {
            "type": "string",
            "default": ""
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "userId",
          "secret",
          "expire",
          "phrase",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "LogModel": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "description": "Event name.",
            "default": ""
          },
          "userId": {
            "type": "string",
            "description": "User ID.",
            "default": ""
          },
          "userEmail": {
            "type": "string",
            "description": "User Email.",
            "default": ""
          },
          "userName": {
            "type": "string",
            "description": "User Name.",
            "default": ""
          },
          "mode": {
            "type": "string",
            "description": "API mode when event triggered.",
            "default": ""
          },
          "ip": {
            "type": "string",
            "description": "IP session in use when the session was created.",
            "default": ""
          },
          "time": {
            "type": "string",
            "description": "Log creation date in ISO 8601 format."
          },
          "osCode": {
            "type": "string",
            "default": ""
          },
          "osName": {
            "type": "string",
            "description": "Operating system name.",
            "default": ""
          },
          "osVersion": {
            "type": "string",
            "description": "Operating system version.",
            "default": ""
          },
          "clientType": {
            "type": "string",
            "description": "Client type.",
            "default": ""
          },
          "clientCode": {
            "type": "string",
            "description": "Client code name.",
            "default": ""
          },
          "clientName": {
            "type": "string",
            "description": "Client name.",
            "default": ""
          },
          "clientVersion": {
            "type": "string",
            "description": "Client version.",
            "default": ""
          },
          "clientEngine": {
            "type": "string",
            "description": "Client engine name.",
            "default": ""
          },
          "clientEngineVersion": {
            "type": "string",
            "description": "Client engine version.",
            "default": ""
          },
          "deviceName": {
            "type": "string",
            "description": "Device name.",
            "default": ""
          },
          "deviceBrand": {
            "type": "string",
            "description": "Device brand name.",
            "default": ""
          },
          "deviceModel": {
            "type": "string",
            "description": "Device model name.",
            "default": ""
          },
          "countryCode": {
            "type": "string",
            "description": "Country two-character ISO 3166-1 alpha code.",
            "default": ""
          },
          "countryName": {
            "type": "string",
            "description": "Country name.",
            "default": ""
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "event",
          "userId",
          "userEmail",
          "userName",
          "mode",
          "ip",
          "time",
          "osCode",
          "osName",
          "osVersion",
          "clientType",
          "clientCode",
          "clientName",
          "clientVersion",
          "clientEngine",
          "clientEngineVersion",
          "deviceName",
          "deviceBrand",
          "deviceModel",
          "countryCode",
          "countryName",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "UpdateUserEmailVerificationDTO": {
        "type": "object",
        "properties": {
          "emailVerification": {
            "type": "boolean",
            "description": "User email verification status."
          }
        },
        "required": ["emailVerification"]
      },
      "UpdateUserPoneVerificationDTO": {
        "type": "object",
        "properties": {
          "phoneVerification": {
            "type": "boolean",
            "description": "User phone verification status."
          }
        },
        "required": ["phoneVerification"]
      },
      "SessionModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID.",
            "default": ""
          },
          "expire": {
            "type": "string",
            "default": ""
          },
          "provider": {
            "type": "string",
            "default": ""
          },
          "providerUid": {
            "type": "string",
            "default": ""
          },
          "providerAccessToken": {
            "type": "string",
            "default": ""
          },
          "providerAccessTokenExpiry": {
            "type": "string",
            "default": ""
          },
          "providerRefreshToken": {
            "type": "string",
            "default": ""
          },
          "ip": {
            "type": "string",
            "default": ""
          },
          "osCode": {
            "type": "string",
            "default": ""
          },
          "osName": {
            "type": "string",
            "default": ""
          },
          "osVersion": {
            "type": "string",
            "default": ""
          },
          "clientType": {
            "type": "string",
            "default": ""
          },
          "clientCode": {
            "type": "string",
            "default": ""
          },
          "clientName": {
            "type": "string",
            "default": ""
          },
          "clientVersion": {
            "type": "string",
            "default": ""
          },
          "clientEngine": {
            "type": "string",
            "default": ""
          },
          "clientEngineVersion": {
            "type": "string",
            "default": ""
          },
          "deviceName": {
            "type": "string",
            "default": ""
          },
          "deviceBrand": {
            "type": "string",
            "default": ""
          },
          "deviceModel": {
            "type": "string",
            "default": ""
          },
          "countryCode": {
            "type": "string",
            "default": ""
          },
          "countryName": {
            "type": "string",
            "default": ""
          },
          "current": {
            "type": "boolean",
            "default": false
          },
          "factors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secret": {
            "type": "string",
            "default": ""
          },
          "mfaUpdatedAt": {
            "type": "string",
            "default": ""
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "userId",
          "expire",
          "provider",
          "providerUid",
          "providerAccessToken",
          "providerAccessTokenExpiry",
          "providerRefreshToken",
          "ip",
          "osCode",
          "osName",
          "osVersion",
          "clientType",
          "clientCode",
          "clientName",
          "clientVersion",
          "clientEngine",
          "clientEngineVersion",
          "deviceName",
          "deviceBrand",
          "deviceModel",
          "countryCode",
          "countryName",
          "current",
          "factors",
          "secret",
          "mfaUpdatedAt",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "CreateTargetDTO": {
        "type": "object",
        "properties": {
          "providerType": {
            "type": "string",
            "description": "The target provider type. Can be one of the following: `email`, `sms` or `push`.",
            "enum": ["email", "push", "sms"]
          },
          "targetId": {
            "type": "string",
            "description": "Target ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "identifier": {
            "type": "string",
            "description": "The target identifier (token, email, phone etc.)",
            "minLength": 1
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID. Message will be sent to this target from the specified provider ID. If no provider ID is set the first setup provider will be used."
          },
          "name": {
            "type": "string",
            "description": "Target name. Max length: 128 chars. For example: My Awesome App Galaxy S24.",
            "minLength": 1,
            "maxLength": 128
          }
        },
        "required": ["providerType", "targetId", "identifier", "name"]
      },
      "UpdateTargetDTO": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The target identifier (token, email, phone etc.)",
            "minLength": 1
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID. Message will be sent to this target from the specified provider ID. If no provider ID is set the first setup provider will be used."
          },
          "name": {
            "type": "string",
            "description": "Target name. Max length: 128 chars. For example: My Awesome App Galaxy S24.",
            "minLength": 1,
            "maxLength": 128
          }
        }
      },
      "UpdateMfaStatusDTO": {
        "type": "object",
        "properties": {
          "mfa": {
            "type": "boolean",
            "description": "Enable or disable MFA."
          }
        },
        "required": ["mfa"]
      },
      "MFAFactorsModel": {
        "type": "object",
        "properties": {
          "totp": {
            "type": "boolean",
            "description": "Can TOTP be used for MFA challenge for this account.",
            "default": false
          },
          "phone": {
            "type": "boolean",
            "description": "Can phone (SMS) be used for MFA challenge for this account.",
            "default": false
          },
          "email": {
            "type": "boolean",
            "description": "Can email be used for MFA challenge for this account.",
            "default": false
          },
          "recoveryCode": {
            "type": "boolean",
            "description": "Can recovery code be used for MFA challenge for this account.",
            "default": false
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "totp",
          "phone",
          "email",
          "recoveryCode",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "MFARecoveryCodesModel": {
        "type": "object",
        "properties": {
          "recoveryCodes": {
            "description": "Recovery codes.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": ["recoveryCodes", "$id", "$createdAt", "$updatedAt", "$permissions"]
      },
      "CreateTeamDTO": {
        "type": "object",
        "properties": {
          "roles": {
            "description": "Array of strings. Use this param to set the roles in the team for the user who created it. The default role is **owner**. A role can be any string. Learn more about [roles and permissions](https://docs.nuvix.in/permissions). Maximum of 100 roles are allowed, each 32 characters long.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 32,
              "minLength": 1
            }
          },
          "teamId": {
            "type": "string",
            "description": "Team ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "name": {
            "type": "string",
            "description": "Team name. Max length: 128 chars.",
            "minLength": 1,
            "maxLength": 128
          }
        },
        "required": ["teamId", "name"]
      },
      "TeamModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Team name.",
            "default": ""
          },
          "total": {
            "type": "number",
            "default": 0
          },
          "prefs": {
            "type": "object"
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": ["name", "total", "prefs", "$id", "$createdAt", "$updatedAt", "$permissions"]
      },
      "UpdateTeamDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Team name. Max length: 128 chars.",
            "minLength": 1,
            "maxLength": 128
          }
        }
      },
      "UpdateTeamPrefsDTO": {
        "type": "object",
        "properties": {
          "prefs": {
            "type": "object",
            "description": "Prefs key-value JSON object."
          }
        }
      },
      "CreateMembershipDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of the new team member.",
            "format": "email"
          },
          "userId": {
            "type": "string",
            "description": "ID of the user to be added to a team."
          },
          "phone": {
            "type": "string",
            "description": "Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "roles": {
            "description": "Array of strings. Use this param to set the user roles in the team. A role can be any string. Learn more about [roles and permissions](https://docs.nuvix.in/permissions).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string",
            "description": "URL to redirect the user back to your app from the invitation email. This parameter is not required when an API key is supplied. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the new team member.",
            "maxLength": 128
          }
        },
        "required": ["roles"]
      },
      "UpdateMembershipDTO": {
        "type": "object",
        "properties": {
          "roles": {
            "description": "An array of strings. Use this param to set the user\\'s roles in the team. A role can be any string. Learn more about [roles and permissions](https://docs.nuvix.in/permissions).",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["roles"]
      },
      "UpdateMembershipStatusDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID."
          },
          "secret": {
            "type": "string",
            "description": "Secret key.",
            "maxLength": 256
          }
        },
        "required": ["userId", "secret"]
      },
      "CreateAccountDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars.')"
          },
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "New user password. Must be between 8 and 256 chars.",
            "minLength": 8,
            "maxLength": 256
          },
          "name": {
            "type": "string",
            "description": "User name. Max length: 128 chars.",
            "minLength": 0,
            "maxLength": 128
          }
        },
        "required": ["userId", "email", "password"]
      },
      "AccountModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User name."
          },
          "password": {
            "type": "string",
            "description": "Hashed user password."
          },
          "hash": {
            "type": "string",
            "description": "Password hashing algorithm.",
            "default": ""
          },
          "hashOptions": {
            "type": "object",
            "description": "Password hashing algorithm configuration."
          },
          "registration": {
            "format": "date-time",
            "type": "string",
            "description": "User registration date in ISO 8601 format."
          },
          "status": {
            "type": "boolean",
            "description": "User status. Pass `true` for enabled and `false` for disabled."
          },
          "labels": {
            "description": "Labels for the user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "passwordUpdate": {
            "format": "date-time",
            "type": "string",
            "description": "Password update time in ISO 8601 format."
          },
          "email": {
            "type": "string",
            "description": "User email address."
          },
          "phone": {
            "type": "string",
            "description": "User phone number in E.164 format.",
            "default": ""
          },
          "emailVerification": {
            "type": "boolean",
            "description": "Email verification status."
          },
          "phoneVerification": {
            "type": "boolean",
            "description": "Phone verification status."
          },
          "mfa": {
            "type": "boolean",
            "description": "Multi factor authentication status."
          },
          "prefs": {
            "type": "object",
            "description": "User preferences as a key-value object"
          },
          "targets": {
            "description": "A user-owned message receiver. A single user may have multiple e.g. emails, phones, and a browser. Each target is registered with a single provider.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetModel"
            }
          },
          "accessedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Most recent access date in ISO 8601 format. This attribute is only updated again after 24 hours."
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "registration",
          "status",
          "labels",
          "passwordUpdate",
          "email",
          "phone",
          "emailVerification",
          "phoneVerification",
          "mfa",
          "prefs",
          "targets",
          "accessedAt",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "UpdatePrefsDTO": {
        "type": "object",
        "properties": {}
      },
      "UpdateNameDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User name. Max length: 128 chars."
          }
        },
        "required": ["name"]
      },
      "UpdatePasswordDTO": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "New user password. Must be at least 8 chars.",
            "minLength": 8,
            "maxLength": 256
          },
          "oldPassword": {
            "type": "string",
            "description": "Current user password. Must be at least 8 chars."
          }
        },
        "required": ["password", "oldPassword"]
      },
      "UpdateEmailDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User password. Must be at least 8 chars.",
            "minLength": 8,
            "maxLength": 256
          }
        },
        "required": ["email", "password"]
      },
      "UpdatePhoneDTO": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "password": {
            "type": "string",
            "description": "User password. Must be at least 8 chars.",
            "minLength": 8,
            "maxLength": 256
          }
        },
        "required": ["phone", "password"]
      },
      "CreateEmailVerificationDTO": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to redirect the user back to your app from the verification email. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.",
            "format": "uri"
          }
        }
      },
      "UpdateEmailVerificationDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID."
          },
          "secret": {
            "type": "string",
            "description": "Valid verification token."
          }
        },
        "required": ["userId", "secret"]
      },
      "UpdatePhoneVerificationDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID."
          },
          "secret": {
            "type": "string",
            "description": "Valid verification token."
          }
        },
        "required": ["userId", "secret"]
      },
      "UpdateAccountMfaDTO": {
        "type": "object",
        "properties": {
          "mfa": {
            "type": "boolean",
            "description": "Enable or disable MFA."
          }
        },
        "required": ["mfa"]
      },
      "MFAChallengeModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID.",
            "default": ""
          },
          "expire": {
            "type": "string",
            "description": "Token expiration date in ISO 8601 format."
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": ["userId", "expire", "$id", "$createdAt", "$updatedAt", "$permissions"]
      },
      "MFATypeModel": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "description": "Secret token used for TOTP factor.",
            "default": ""
          },
          "uri": {
            "type": "string",
            "description": "URI for authenticator apps.",
            "default": ""
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": ["secret", "uri", "$id", "$createdAt", "$updatedAt", "$permissions"]
      },
      "VerifyMfaAuthenticatorDTO": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "string",
            "description": "Valid verification token."
          }
        },
        "required": ["otp"]
      },
      "CreateMfaChallengeDTO": {
        "type": "object",
        "properties": {
          "factor": {
            "type": "string",
            "description": "Factor used for verification. Must be one of following: `email`, `phone`, `totp`, `recoveryCode`."
          }
        },
        "required": ["factor"]
      },
      "VerifyMfaChallengeDTO": {
        "type": "object",
        "properties": {
          "challengeId": {
            "type": "string",
            "description": "ID of the challenge."
          },
          "otp": {
            "type": "string",
            "description": "Valid verification token."
          }
        },
        "required": ["challengeId", "otp"]
      },
      "CreateRecoveryDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          },
          "url": {
            "type": "string",
            "description": "URL to redirect the user back to your app from the recovery email. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.",
            "format": "uri"
          }
        },
        "required": ["email", "url"]
      },
      "UpdateRecoveryDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID."
          },
          "secret": {
            "type": "string",
            "description": "Valid reset token."
          },
          "password": {
            "type": "string",
            "description": "New user password. Must be between 8 and 256 chars."
          }
        },
        "required": ["userId", "secret", "password"]
      },
      "CreateEmailSessionDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User password. Must be at least 8 chars.",
            "minLength": 8
          }
        },
        "required": ["email", "password"]
      },
      "CreateSessionDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "secret": {
            "type": "string",
            "description": "Secret of a token generated by login methods. For example, the `createMagicURLToken` or `createPhoneToken` methods.",
            "minLength": 200,
            "maxLength": 256
          }
        },
        "required": ["userId", "secret"]
      },
      "CreateMagicURLTokenDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars. If the email address has never been used, a new account is created using the provided userId. Otherwise, if the email address is already attached to an account, the user ID is ignored."
          },
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          },
          "url": {
            "type": "string",
            "description": "URL to redirect the user back to your app from the magic URL login. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.",
            "format": "uri"
          },
          "phrase": {
            "type": "boolean",
            "description": "Toggle for security phrase. If enabled, email will be send with a randomly generated phrase and the phrase will also be included in the response. Confirming phrases match increases the security of your authentication flow.",
            "default": false
          }
        },
        "required": ["userId", "email"]
      },
      "CreateEmailTokenDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars. If the email address has never been used, a new account is created using the provided userId. Otherwise, if the email address is already attached to an account, the user ID is ignored."
          },
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email"
          },
          "phrase": {
            "type": "boolean",
            "description": "Toggle for security phrase. If enabled, email will be send with a randomly generated phrase and the phrase will also be included in the response. Confirming phrases match increases the security of your authentication flow.",
            "default": false
          }
        },
        "required": ["userId", "email"]
      },
      "CreatePhoneTokenDTO": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "userId": {
            "type": "string",
            "description": "Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars. If the email address has never been used, a new account is created using the provided userId. Otherwise, if the email address is already attached to an account, the user ID is ignored."
          }
        },
        "required": ["phone", "userId"]
      },
      "CreatePushTargetDTO": {
        "type": "object",
        "properties": {
          "targetId": {
            "type": "string",
            "description": "Target ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "identifier": {
            "type": "string",
            "description": "The target identifier (token, email, phone etc.)"
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID. Message will be sent to this target from the specified provider ID. If no provider ID is set the first setup provider will be used."
          }
        },
        "required": ["targetId", "identifier"]
      },
      "UpdatePushTargetDTO": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The target identifier (token, email, phone etc.)"
          }
        },
        "required": ["identifier"]
      },
      "SchemaModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "object"
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": ["name", "type", "$id", "$createdAt", "$updatedAt", "$permissions"]
      },
      "CreateSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-z][a-z0-9_]{0,254}$",
            "description": "Schema name",
            "example": "my_schema",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "Schema description",
            "example": "This is my schema",
            "minLength": 0,
            "maxLength": 255
          },
          "type": {
            "enum": ["managed", "unmanaged", "document"],
            "type": "string",
            "description": "Schema type, either managed, unmanaged or document",
            "example": "managed"
          }
        },
        "required": ["name", "type"]
      },
      "BucketModel": {
        "type": "object",
        "properties": {
          "fileSecurity": {
            "type": "boolean",
            "description": "Whether file-level security is enabled.",
            "default": false
          },
          "name": {
            "type": "string",
            "description": "Bucket name.",
            "default": ""
          },
          "enabled": {
            "type": "boolean",
            "description": "Bucket enabled.",
            "default": true
          },
          "maximumFileSize": {
            "type": "number",
            "description": "Maximum file size supported.",
            "default": 0
          },
          "allowedFileExtensions": {
            "description": "Allowed file extensions.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "compression": {
            "type": "string",
            "description": "Compression algorithm chosen for compression.",
            "default": ""
          },
          "encryption": {
            "type": "boolean",
            "description": "Bucket is encrypted.",
            "default": true
          },
          "antivirus": {
            "type": "boolean",
            "description": "Virus scanning is enabled.",
            "default": true
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "fileSecurity",
          "name",
          "enabled",
          "maximumFileSize",
          "allowedFileExtensions",
          "compression",
          "encryption",
          "antivirus",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "CreateBucketDTO": {
        "type": "object",
        "properties": {
          "compression": {
            "type": "string",
            "description": "Compression algorithm choosen for compression.",
            "default": "none",
            "enum": ["none", "gzip", "zstd"]
          },
          "bucketId": {
            "type": "string",
            "description": "Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "name": {
            "type": "string",
            "description": "Bucket name",
            "maxLength": 128
          },
          "permissions": {
            "description": "An array of permission strings. By default, no user is granted with any permissions. [Learn more about permissions](https://docs.nuvix.in/permissions).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSecurity": {
            "type": "boolean",
            "description": "Enables configuring permissions for individual file. A user needs one of file or bucket level permissions to access a file. [Learn more about permissions](https://docs.nuvix.in/permissions).",
            "default": false
          },
          "enabled": {
            "type": "boolean",
            "description": "Is bucket enabled? When set to \\'disabled\\', users cannot access the files in this bucket but Server SDKs with and API key can still access the bucket. No files are lost when this is toggled.",
            "default": true
          },
          "maximumFileSize": {
            "type": "number",
            "description": "Maximum file size allowed in bytes.",
            "minimum": 1
          },
          "allowedFileExtensions": {
            "description": "Allowed file extensions.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "encryption": {
            "type": "boolean",
            "description": "Is encryption enabled?",
            "default": false
          },
          "antivirus": {
            "type": "boolean",
            "description": "Is virus scanning enabled?",
            "default": false
          }
        },
        "required": [
          "bucketId",
          "name",
          "permissions",
          "fileSecurity",
          "enabled",
          "maximumFileSize",
          "allowedFileExtensions",
          "encryption",
          "antivirus"
        ]
      },
      "UpdateBucketDTO": {
        "type": "object",
        "properties": {
          "compression": {
            "type": "string",
            "description": "Compression algorithm choosen for compression.",
            "default": "none",
            "enum": ["none", "gzip", "zstd"]
          },
          "name": {
            "type": "string",
            "description": "Bucket name",
            "maxLength": 128
          },
          "permissions": {
            "description": "An array of permission strings. By default, no user is granted with any permissions. [Learn more about permissions](https://docs.nuvix.in/permissions).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSecurity": {
            "type": "boolean",
            "description": "Enables configuring permissions for individual file. A user needs one of file or bucket level permissions to access a file. [Learn more about permissions](https://docs.nuvix.in/permissions).",
            "default": false
          },
          "enabled": {
            "type": "boolean",
            "description": "Is bucket enabled? When set to \\'disabled\\', users cannot access the files in this bucket but Server SDKs with and API key can still access the bucket. No files are lost when this is toggled.",
            "default": true
          },
          "maximumFileSize": {
            "type": "number",
            "description": "Maximum file size allowed in bytes.",
            "minimum": 1
          },
          "allowedFileExtensions": {
            "description": "Allowed file extensions.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "encryption": {
            "type": "boolean",
            "description": "Is encryption enabled?",
            "default": false
          },
          "antivirus": {
            "type": "boolean",
            "description": "Is virus scanning enabled?",
            "default": false
          }
        }
      },
      "UsageStorageModel": {
        "type": "object",
        "properties": {
          "range": {
            "type": "string",
            "default": ""
          },
          "bucketsTotal": {
            "type": "number",
            "default": 0
          },
          "filesTotal": {
            "type": "number",
            "default": 0
          },
          "filesStorageTotal": {
            "type": "number",
            "default": 0
          },
          "buckets": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "storage": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "range",
          "bucketsTotal",
          "filesTotal",
          "filesStorageTotal",
          "buckets",
          "files",
          "storage",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "UsageBucketsModel": {
        "type": "object",
        "properties": {
          "range": {
            "type": "string",
            "default": ""
          },
          "filesTotal": {
            "type": "number",
            "default": 0
          },
          "filesStorageTotal": {
            "type": "number",
            "default": 0
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "storage": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "range",
          "filesTotal",
          "filesStorageTotal",
          "files",
          "storage",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "FileModel": {
        "type": "object",
        "properties": {
          "bucketId": {
            "type": "string",
            "description": "Bucket ID.",
            "default": ""
          },
          "permissions": {
            "description": "File permissions.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "description": "File name.",
            "default": ""
          },
          "signature": {
            "type": "string",
            "description": "File MD5 signature.",
            "default": ""
          },
          "mimeType": {
            "type": "string",
            "description": "File mime type.",
            "default": ""
          },
          "sizeOriginal": {
            "type": "number",
            "description": "File original size in bytes.",
            "default": 0
          },
          "chunksTotal": {
            "type": "number",
            "description": "Total number of chunks available.",
            "default": 0
          },
          "chunksUploaded": {
            "type": "number",
            "description": "Total number of chunks uploaded.",
            "default": 0
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "bucketId",
          "permissions",
          "name",
          "signature",
          "mimeType",
          "sizeOriginal",
          "chunksTotal",
          "chunksUploaded",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "UpdateFileDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for the file (1-255 characters).",
            "minLength": 1,
            "maxLength": 255
          },
          "permissions": {
            "description": "An array of permission strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://docs.nuvix.in/permissions).",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PermissionsDTO": {
        "type": "object",
        "properties": {
          "permissions": {
            "description": "An array of permissions strings. [Learn more about permissions](https://docs.nuvix.in/permissions).'",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["permissions"]
      },
      "CreateEmailMessageDTO": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Email Subject.",
            "maxLength": 998
          },
          "content": {
            "type": "string",
            "description": "Email Content.",
            "maxLength": 64230
          },
          "cc": {
            "description": "Array of target IDs to be added as CC.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bcc": {
            "description": "Array of target IDs to be added as BCC.'",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attachments": {
            "description": "Array of compound ID strings of bucket IDs and file IDs to be attached to the email. They should be formatted as <BUCKET_ID>:<FILE_ID>.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "html": {
            "type": "boolean",
            "description": "Is content of type HTML"
          }
        },
        "required": ["subject", "content"]
      },
      "MessageModel": {
        "type": "object",
        "properties": {
          "providerType": {
            "type": "string",
            "description": "Message provider type.",
            "default": ""
          },
          "topics": {
            "description": "Topic IDs set as recipients.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "targets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scheduledAt": {
            "type": "string"
          },
          "deliveredAt": {
            "type": "string"
          },
          "deliveryErrors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deliveredTotal": {
            "type": "number",
            "default": 0
          },
          "data": {
            "type": "object",
            "description": "Data of the message."
          },
          "status": {
            "type": "string",
            "default": "draft"
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "providerType",
          "topics",
          "users",
          "targets",
          "deliveryErrors",
          "deliveredTotal",
          "data",
          "status",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "CreateSmsMessageDTO": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "SMS Content.",
            "maxLength": 64230
          }
        },
        "required": ["content"]
      },
      "CreatePushMessageDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title for push notification.",
            "maxLength": 256
          },
          "body": {
            "type": "string",
            "description": "Body for push notification.",
            "maxLength": 64230
          },
          "data": {
            "type": "object",
            "description": "Additional key-value pair data for push notification."
          },
          "action": {
            "type": "string",
            "description": "Action for push notification.",
            "maxLength": 256
          },
          "image": {
            "type": "string",
            "description": "Image for push notification. Must be a compound bucket ID to file ID of a jpeg, png, or bmp image in Nuvix Storage. It should be formatted as <BUCKET_ID>:<FILE_ID>."
          },
          "icon": {
            "type": "string",
            "description": "Icon for push notification. Available only for Android and Web Platform.",
            "maxLength": 256
          },
          "sound": {
            "type": "string",
            "description": "Sound for push notification. Available only for Android and iOS Platform.",
            "maxLength": 256
          },
          "color": {
            "type": "string",
            "description": "Color for push notification. Available only for Android Platform.",
            "maxLength": 256
          },
          "tag": {
            "type": "string",
            "description": "Tag for push notification. Available only for Android Platform.",
            "maxLength": 256
          },
          "badge": {
            "type": "number",
            "description": "Badge for push notification. Available only for iOS Platform.",
            "minimum": -1
          },
          "contentAvailable": {
            "type": "boolean",
            "description": "If set to true, the notification will be delivered in the background. Available only for iOS Platform."
          },
          "critical": {
            "type": "boolean",
            "description": "If set to true, the notification will be marked as critical. This requires the app to have the critical notification entitlement. Available only for iOS Platform."
          },
          "priority": {
            "type": "object",
            "description": "Set the notification priority. \"normal\" will consider device state and may not deliver notifications immediately. \"high\" will always attempt to immediately deliver the notification.",
            "default": "high"
          }
        }
      },
      "UpdateEmailMessageDTO": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Email Subject.",
            "maxLength": 998
          },
          "content": {
            "type": "string",
            "description": "Email Content.",
            "maxLength": 64230
          },
          "html": {
            "type": "boolean",
            "description": "Is content of type HTML"
          },
          "cc": {
            "description": "Array of target IDs to be added as CC.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bcc": {
            "description": "Array of target IDs to be added as BCC.'",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attachments": {
            "description": "Array of compound ID strings of bucket IDs and file IDs to be attached to the email. They should be formatted as <BUCKET_ID>:<FILE_ID>.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateSmsMessageDTO": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "SMS Content.",
            "maxLength": 64230
          }
        }
      },
      "UpdatePushMessageDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title for push notification.",
            "maxLength": 256
          },
          "body": {
            "type": "string",
            "description": "Body for push notification.",
            "maxLength": 64230
          },
          "data": {
            "type": "object",
            "description": "Additional key-value pair data for push notification."
          },
          "action": {
            "type": "string",
            "description": "Action for push notification.",
            "maxLength": 256
          },
          "image": {
            "type": "string",
            "description": "Image for push notification. Must be a compound bucket ID to file ID of a jpeg, png, or bmp image in Nuvix Storage. It should be formatted as <BUCKET_ID>:<FILE_ID>."
          },
          "icon": {
            "type": "string",
            "description": "Icon for push notification. Available only for Android and Web Platform.",
            "maxLength": 256
          },
          "sound": {
            "type": "string",
            "description": "Sound for push notification. Available only for Android and iOS Platform.",
            "maxLength": 256
          },
          "color": {
            "type": "string",
            "description": "Color for push notification. Available only for Android Platform.",
            "maxLength": 256
          },
          "tag": {
            "type": "string",
            "description": "Tag for push notification. Available only for Android Platform.",
            "maxLength": 256
          },
          "badge": {
            "type": "number",
            "description": "Badge for push notification. Available only for iOS Platform.",
            "minimum": -1
          },
          "contentAvailable": {
            "type": "boolean",
            "description": "If set to true, the notification will be delivered in the background. Available only for iOS Platform."
          },
          "critical": {
            "type": "boolean",
            "description": "If set to true, the notification will be marked as critical. This requires the app to have the critical notification entitlement. Available only for iOS Platform."
          },
          "priority": {
            "type": "object",
            "description": "Set the notification priority. \"normal\" will consider device state and may not deliver notifications immediately. \"high\" will always attempt to immediately deliver the notification.",
            "default": "high"
          }
        }
      },
      "CreateMailgunProviderDTO": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "Mailgun API Key."
          },
          "domain": {
            "type": "string",
            "description": "Mailgun Domain."
          },
          "isEuRegion": {
            "type": "boolean",
            "description": "Set as EU region."
          },
          "fromName": {
            "type": "string",
            "description": "Sender Name.",
            "maxLength": 128
          },
          "fromEmail": {
            "type": "string",
            "description": "Sender email address.",
            "format": "email"
          },
          "replyToName": {
            "type": "string",
            "description": "Name set in the reply to field for the mail. Default value is sender name. Reply to name must have reply to email as well.",
            "maxLength": 128
          },
          "replyToEmail": {
            "type": "string",
            "description": "Email set in the reply to field for the mail. Default value is sender email. Reply to email must have reply to name as well.",
            "format": "email"
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          }
        },
        "required": ["providerId", "name"]
      },
      "ProviderModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name for the provider instance.",
            "default": ""
          },
          "provider": {
            "type": "string",
            "default": ""
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "type": {
            "type": "string",
            "default": ""
          },
          "credentials": {
            "type": "object"
          },
          "options": {
            "type": "object"
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "provider",
          "enabled",
          "type",
          "credentials",
          "options",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "CreateSendgridProviderDTO": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "Sendgrid API key."
          },
          "fromName": {
            "type": "string",
            "description": "Sender Name.",
            "maxLength": 128
          },
          "fromEmail": {
            "type": "string",
            "description": "Sender email address.",
            "format": "email"
          },
          "replyToName": {
            "type": "string",
            "description": "Name set in the reply to field for the mail. Default value is sender name.",
            "maxLength": 128
          },
          "replyToEmail": {
            "type": "string",
            "description": "Email set in the reply to field for the mail. Default value is sender email.",
            "format": "email"
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          }
        },
        "required": ["apiKey", "providerId", "name"]
      },
      "CreateSMTPProviderDTO": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "SMTP hosts. Either a single hostname or multiple semicolon-delimited hostnames. You can also specify a different port for each host such as `smtp1.example.com:25;smtp2.example.com`. You can also specify encryption type, for example: `tls://smtp1.example.com:587;ssl://smtp2.example.com:465\"`. Hosts will be tried in order."
          },
          "port": {
            "type": "number",
            "description": "The default SMTP server port.",
            "default": 587,
            "minimum": 1,
            "maximum": 65535
          },
          "username": {
            "type": "string",
            "description": "Authentication username."
          },
          "password": {
            "type": "string",
            "description": "Authentication password."
          },
          "encryption": {
            "type": "string",
            "description": "Encryption type. Can be omitted, 'ssl' or 'tls'",
            "default": "none"
          },
          "autoTLS": {
            "type": "boolean",
            "description": "Enable SMTP AutoTLS feature.",
            "default": true
          },
          "mailer": {
            "type": "string",
            "description": "The value to use for the X-Mailer header."
          },
          "fromName": {
            "type": "string",
            "description": "Sender Name.",
            "maxLength": 128
          },
          "fromEmail": {
            "type": "string",
            "description": "Sender email address.",
            "format": "email"
          },
          "replyToName": {
            "type": "string",
            "description": "Name set in the reply to field for the mail. Default value is sender name.",
            "maxLength": 128
          },
          "replyToEmail": {
            "type": "string",
            "description": "Email set in the reply to field for the mail. Default value is sender email.",
            "format": "email"
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          }
        },
        "required": ["host", "providerId", "name"]
      },
      "CreateMsg91ProviderDTO": {
        "type": "object",
        "properties": {
          "templateId": {
            "type": "string",
            "description": "Msg91 template ID"
          },
          "senderId": {
            "type": "string",
            "description": "Msg91 sender ID."
          },
          "authKey": {
            "type": "string",
            "description": "Msg91 auth key."
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          }
        },
        "required": ["providerId", "name"]
      },
      "CreateTelesignProviderDTO": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Sender Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "customerId": {
            "type": "string",
            "description": "Telesign customer ID."
          },
          "apiKey": {
            "type": "string",
            "description": "Telesign API key."
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          }
        },
        "required": ["providerId", "name"]
      },
      "CreateTextmagicProviderDTO": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Sender Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "username": {
            "type": "string",
            "description": "Textmagic username."
          },
          "apiKey": {
            "type": "string",
            "description": "Textmagic apiKey."
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          }
        },
        "required": ["providerId", "name"]
      },
      "CreateTwilioProviderDTO": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Sender Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "accountSid": {
            "type": "string",
            "description": "Twilio account secret ID."
          },
          "authToken": {
            "type": "string",
            "description": "Twilio authentication token."
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          }
        },
        "required": ["providerId", "name"]
      },
      "CreateVonageProviderDTO": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Sender Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "apiKey": {
            "type": "string",
            "description": "Vonage API key."
          },
          "apiSecret": {
            "type": "string",
            "description": "Vonage API secret."
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          }
        },
        "required": ["providerId", "name"]
      },
      "CreateFcmProviderDTO": {
        "type": "object",
        "properties": {
          "serviceAccountJSON": {
            "type": "object",
            "description": "FCM service account JSON."
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          }
        },
        "required": ["providerId", "name"]
      },
      "CreateApnsProviderDTO": {
        "type": "object",
        "properties": {
          "authKey": {
            "type": "string",
            "description": "APNS authentication key."
          },
          "authKeyId": {
            "type": "string",
            "description": "APNS authentication key ID."
          },
          "teamId": {
            "type": "string",
            "description": "APNS team ID."
          },
          "bundleId": {
            "type": "string",
            "description": "APNS bundle ID."
          },
          "sandbox": {
            "type": "boolean",
            "description": "Use APNS sandbox environment.",
            "default": false
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          }
        },
        "required": ["providerId", "name"]
      },
      "UpdateMailgunProviderDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          },
          "apiKey": {
            "type": "string",
            "description": "Mailgun API Key."
          },
          "domain": {
            "type": "string",
            "description": "Mailgun Domain."
          },
          "isEuRegion": {
            "type": "boolean",
            "description": "Set as EU region."
          },
          "fromName": {
            "type": "string",
            "description": "Sender Name.",
            "maxLength": 128
          },
          "fromEmail": {
            "type": "string",
            "description": "Sender email address.",
            "format": "email"
          },
          "replyToName": {
            "type": "string",
            "description": "Name set in the reply to field for the mail. Default value is sender name. Reply to name must have reply to email as well.",
            "maxLength": 128
          },
          "replyToEmail": {
            "type": "string",
            "description": "Email set in the reply to field for the mail. Default value is sender email. Reply to email must have reply to name as well.",
            "format": "email"
          }
        }
      },
      "UpdateSendgridProviderDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          },
          "apiKey": {
            "type": "string",
            "description": "Sendgrid API key."
          },
          "fromName": {
            "type": "string",
            "description": "Sender Name.",
            "maxLength": 128
          },
          "fromEmail": {
            "type": "string",
            "description": "Sender email address.",
            "format": "email"
          },
          "replyToName": {
            "type": "string",
            "description": "Name set in the reply to field for the mail. Default value is sender name.",
            "maxLength": 128
          },
          "replyToEmail": {
            "type": "string",
            "description": "Email set in the reply to field for the mail. Default value is sender email.",
            "format": "email"
          }
        }
      },
      "UpdateSMTPProviderDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          },
          "host": {
            "type": "string",
            "description": "SMTP hosts. Either a single hostname or multiple semicolon-delimited hostnames. You can also specify a different port for each host such as `smtp1.example.com:25;smtp2.example.com`. You can also specify encryption type, for example: `tls://smtp1.example.com:587;ssl://smtp2.example.com:465\"`. Hosts will be tried in order."
          },
          "port": {
            "type": "number",
            "description": "The default SMTP server port.",
            "default": 587,
            "minimum": 1,
            "maximum": 65535
          },
          "username": {
            "type": "string",
            "description": "Authentication username."
          },
          "password": {
            "type": "string",
            "description": "Authentication password."
          },
          "encryption": {
            "type": "string",
            "description": "Encryption type. Can be omitted, 'ssl' or 'tls'",
            "default": "none"
          },
          "autoTLS": {
            "type": "boolean",
            "description": "Enable SMTP AutoTLS feature.",
            "default": true
          },
          "mailer": {
            "type": "string",
            "description": "The value to use for the X-Mailer header."
          },
          "fromName": {
            "type": "string",
            "description": "Sender Name.",
            "maxLength": 128
          },
          "fromEmail": {
            "type": "string",
            "description": "Sender email address.",
            "format": "email"
          },
          "replyToName": {
            "type": "string",
            "description": "Name set in the reply to field for the mail. Default value is sender name.",
            "maxLength": 128
          },
          "replyToEmail": {
            "type": "string",
            "description": "Email set in the reply to field for the mail. Default value is sender email.",
            "format": "email"
          }
        }
      },
      "UpdateMsg91ProviderDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          },
          "templateId": {
            "type": "string",
            "description": "Msg91 template ID"
          },
          "senderId": {
            "type": "string",
            "description": "Msg91 sender ID."
          },
          "authKey": {
            "type": "string",
            "description": "Msg91 auth key."
          }
        }
      },
      "UpdateTelesignProviderDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          },
          "from": {
            "type": "string",
            "description": "Sender Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "customerId": {
            "type": "string",
            "description": "Telesign customer ID."
          },
          "apiKey": {
            "type": "string",
            "description": "Telesign API key."
          }
        }
      },
      "UpdateTextmagicProviderDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          },
          "from": {
            "type": "string",
            "description": "Sender Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "username": {
            "type": "string",
            "description": "Textmagic username."
          },
          "apiKey": {
            "type": "string",
            "description": "Textmagic apiKey."
          }
        }
      },
      "UpdateTwilioProviderDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          },
          "from": {
            "type": "string",
            "description": "Sender Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "accountSid": {
            "type": "string",
            "description": "Twilio account secret ID."
          },
          "authToken": {
            "type": "string",
            "description": "Twilio authentication token."
          }
        }
      },
      "UpdateVonageProviderDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          },
          "from": {
            "type": "string",
            "description": "Sender Phone number. Format this number with a leading \\'+\\' and a country code, e.g., +16175551212."
          },
          "apiKey": {
            "type": "string",
            "description": "Vonage API key."
          },
          "apiSecret": {
            "type": "string",
            "description": "Vonage API secret."
          }
        }
      },
      "UpdateFcmProviderDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          },
          "serviceAccountJSON": {
            "type": "object",
            "description": "FCM service account JSON."
          }
        }
      },
      "UpdateApnsProviderDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provider name.",
            "maxLength": 128
          },
          "enabled": {
            "type": "boolean",
            "description": "Set as enabled."
          },
          "authKey": {
            "type": "string",
            "description": "APNS authentication key."
          },
          "authKeyId": {
            "type": "string",
            "description": "APNS authentication key ID."
          },
          "teamId": {
            "type": "string",
            "description": "APNS team ID."
          },
          "bundleId": {
            "type": "string",
            "description": "APNS bundle ID."
          },
          "sandbox": {
            "type": "boolean",
            "description": "Use APNS sandbox environment.",
            "default": false
          }
        }
      },
      "CreateTopicDTO": {
        "type": "object",
        "properties": {
          "topicId": {
            "type": "string",
            "description": "Topic ID. Choose a custom Topic ID or a new Topic ID."
          },
          "name": {
            "type": "string",
            "description": "Topic Name.",
            "maxLength": 128
          },
          "subscribe": {
            "description": "An array of role strings with subscribe permission. By default all users are granted with any subscribe permission. [learn more about roles](https://docs.nuvix.in/permissions#permission-roles).",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 64
            }
          }
        },
        "required": ["topicId", "name"]
      },
      "TopicModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the topic.",
            "default": ""
          },
          "emailTotal": {
            "type": "number",
            "default": 0
          },
          "smsTotal": {
            "type": "number",
            "default": 0
          },
          "pushTotal": {
            "type": "number",
            "default": 0
          },
          "subscribe": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "emailTotal",
          "smsTotal",
          "pushTotal",
          "subscribe",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "UpdateTopicDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Topic Name.",
            "maxLength": 128
          },
          "subscribe": {
            "description": "An array of role strings with subscribe permission. By default all users are granted with any subscribe permission. [learn more about roles](https://docs.nuvix.in/permissions#permission-roles).",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 64
            }
          }
        }
      },
      "SubscriberModel": {
        "type": "object",
        "properties": {
          "targetId": {
            "type": "string",
            "description": "Target ID.",
            "default": ""
          },
          "target": {
            "type": "object"
          },
          "userId": {
            "type": "string",
            "default": ""
          },
          "userName": {
            "type": "string",
            "default": ""
          },
          "topicId": {
            "type": "string",
            "default": ""
          },
          "providerType": {
            "type": "string",
            "default": ""
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "targetId",
          "target",
          "userId",
          "userName",
          "topicId",
          "providerType",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "IndexModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Index Key.",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "Index type.",
            "default": ""
          },
          "status": {
            "type": "string",
            "description": "Index status. Possible values: `available`, `processing`, `deleting`, `stuck`, or `failed`.",
            "default": ""
          },
          "error": {
            "type": "string",
            "description": "Error message. Displays error generated on failure of creating or deleting an index.",
            "default": ""
          },
          "attributes": {
            "description": "Index attributes.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "orders": {
            "description": "Index orders.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "key",
          "type",
          "status",
          "error",
          "attributes",
          "orders",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "CollectionModel": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string",
            "description": "Schema ID.",
            "default": ""
          },
          "name": {
            "type": "string",
            "description": "Collection name.",
            "default": ""
          },
          "enabled": {
            "type": "boolean",
            "description": "Collection enabled. Can be 'enabled' or 'disabled'.\nWhen disabled, the collection is inaccessible to users,\nbut remains accessible to Server SDKs using API keys."
          },
          "documentSecurity": {
            "type": "boolean",
            "description": "Whether document-level permissions are enabled."
          },
          "attributes": {
            "description": "Collection attributes.",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "indexes": {
            "description": "Collection indexes.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndexModel"
            }
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "$schema",
          "name",
          "enabled",
          "documentSecurity",
          "attributes",
          "indexes",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "CreateCollectionDTO": {
        "type": "object",
        "properties": {
          "collectionId": {
            "type": "string",
            "description": "Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "name": {
            "type": "string",
            "description": "Collection name. Max length: 128 chars.",
            "maxLength": 128
          },
          "permissions": {
            "description": "An array of permissions strings. By default, no user is granted with any permissions. [Learn more about permissions](https://docs.nuvix.in/permissions).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documentSecurity": {
            "type": "boolean",
            "description": "Enables configuring permissions for individual documents. A user needs one of document or collection level permissions to access a document. [Learn more about permissions](https://docs.nuvix.in/permissions).",
            "default": false
          },
          "enabled": {
            "type": "boolean",
            "description": "Is collection enabled? When set to \\'disabled\\', users cannot access the collection but Server SDKs with and API key can still read and write to the collection. No data is lost when this is toggled.",
            "default": true
          }
        },
        "required": ["collectionId", "name", "documentSecurity", "enabled"]
      },
      "UpdateCollectionDTO": {
        "type": "object",
        "properties": {
          "documentSecurity": {
            "type": "boolean",
            "description": "Enables configuring permissions for individual documents. A user needs one of document or collection level permissions to access a document. [Learn more about permissions](https://docs.nuvix.in/permissions).",
            "default": false
          },
          "name": {
            "type": "string",
            "description": "Collection name. Max length: 128 chars.",
            "maxLength": 128
          },
          "permissions": {
            "description": "An array of permissions strings. By default, no user is granted with any permissions. [Learn more about permissions](https://docs.nuvix.in/permissions).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "Is collection enabled? When set to \\'disabled\\', users cannot access the collection but Server SDKs with and API key can still read and write to the collection. No data is lost when this is toggled.",
            "default": true
          }
        }
      },
      "UsageCollectionModel": {
        "type": "object",
        "properties": {
          "range": {
            "type": "string",
            "default": ""
          },
          "documentsTotal": {
            "type": "number",
            "default": 0
          },
          "documents": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "range",
          "documentsTotal",
          "documents",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "AttributeModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key.",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "Attribute type.",
            "default": ""
          },
          "status": {
            "type": "string",
            "description": "Attribute status. Possible values: `available`, `processing`, `deleting`, `stuck`, or `failed`.",
            "default": "available"
          },
          "error": {
            "type": "string",
            "description": "Error message. Displays error generated on failure of creating or deleting an attribute.",
            "default": ""
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "key",
          "type",
          "status",
          "error",
          "required",
          "array",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "CreateStringAttributeDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key."
          },
          "size": {
            "type": "number",
            "description": "Attribute size for text attributes, in number of characters",
            "default": 0,
            "minimum": 1
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "string",
            "nullable": true,
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": null
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          },
          "encrypt": {
            "type": "boolean",
            "description": "Toggle encryption for the attribute. Encryption enhances security by not storing any plain text values in the database. However, encrypted attributes cannot be queried.",
            "default": false
          }
        },
        "required": ["key", "size"]
      },
      "AttributeStringModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key.",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "Attribute type.",
            "default": "",
            "enum": [
              "string",
              "integer",
              "float",
              "boolean",
              "timestamptz",
              "jsonb",
              "relationship",
              "virtual",
              "uuid"
            ]
          },
          "status": {
            "type": "string",
            "description": "Attribute status. Possible values: `available`, `processing`, `deleting`, `stuck`, or `failed`.",
            "default": "available"
          },
          "error": {
            "type": "string",
            "description": "Error message. Displays error generated on failure of creating or deleting an attribute.",
            "default": ""
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          },
          "size": {
            "type": "number",
            "default": 0
          },
          "default": {
            "type": "string",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "key",
          "type",
          "status",
          "error",
          "required",
          "array",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions",
          "size",
          "default"
        ]
      },
      "CreateEmailAttributeDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "string",
            "nullable": true,
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": null
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          }
        },
        "required": ["key"]
      },
      "AttributeEmailModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key.",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "Attribute type.",
            "default": "",
            "enum": [
              "string",
              "integer",
              "float",
              "boolean",
              "timestamptz",
              "jsonb",
              "relationship",
              "virtual",
              "uuid"
            ]
          },
          "status": {
            "type": "string",
            "description": "Attribute status. Possible values: `available`, `processing`, `deleting`, `stuck`, or `failed`.",
            "default": "available"
          },
          "error": {
            "type": "string",
            "description": "Error message. Displays error generated on failure of creating or deleting an attribute.",
            "default": ""
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          },
          "format": {
            "enum": ["email", "enum", "ip", "datetime", "url", "integer", "float"],
            "type": "string"
          },
          "default": {
            "type": "string",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "key",
          "type",
          "status",
          "error",
          "required",
          "array",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions",
          "format",
          "default"
        ]
      },
      "CreateEnumAttributeDTO": {
        "type": "object",
        "properties": {
          "elements": {
            "description": "Array of elements in enumerated type. Uses length of longest element to determine size.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            }
          },
          "default": {
            "type": "object",
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": null
          },
          "key": {
            "type": "string",
            "description": "Attribute Key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          }
        },
        "required": ["key"]
      },
      "AttributeEnumModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key.",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "Attribute type.",
            "default": "",
            "enum": [
              "string",
              "integer",
              "float",
              "boolean",
              "timestamptz",
              "jsonb",
              "relationship",
              "virtual",
              "uuid"
            ]
          },
          "status": {
            "type": "string",
            "description": "Attribute status. Possible values: `available`, `processing`, `deleting`, `stuck`, or `failed`.",
            "default": "available"
          },
          "error": {
            "type": "string",
            "description": "Error message. Displays error generated on failure of creating or deleting an attribute.",
            "default": ""
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          },
          "elements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "format": {
            "enum": ["email", "enum", "ip", "datetime", "url", "integer", "float"],
            "type": "string"
          },
          "default": {
            "type": "string",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "key",
          "type",
          "status",
          "error",
          "required",
          "array",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions",
          "elements",
          "format",
          "default"
        ]
      },
      "CreateIpAttributeDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "string",
            "nullable": true,
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": null
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          }
        },
        "required": ["key"]
      },
      "AttributeIPModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key.",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "Attribute type.",
            "default": "",
            "enum": [
              "string",
              "integer",
              "float",
              "boolean",
              "timestamptz",
              "jsonb",
              "relationship",
              "virtual",
              "uuid"
            ]
          },
          "status": {
            "type": "string",
            "description": "Attribute status. Possible values: `available`, `processing`, `deleting`, `stuck`, or `failed`.",
            "default": "available"
          },
          "error": {
            "type": "string",
            "description": "Error message. Displays error generated on failure of creating or deleting an attribute.",
            "default": ""
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          },
          "format": {
            "enum": ["email", "enum", "ip", "datetime", "url", "integer", "float"],
            "type": "string"
          },
          "default": {
            "type": "string",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "key",
          "type",
          "status",
          "error",
          "required",
          "array",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions",
          "format",
          "default"
        ]
      },
      "CreateURLAttributeDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "string",
            "nullable": true,
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": null
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          }
        },
        "required": ["key"]
      },
      "AttributeURLModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key.",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "Attribute type.",
            "default": "",
            "enum": [
              "string",
              "integer",
              "float",
              "boolean",
              "timestamptz",
              "jsonb",
              "relationship",
              "virtual",
              "uuid"
            ]
          },
          "status": {
            "type": "string",
            "description": "Attribute status. Possible values: `available`, `processing`, `deleting`, `stuck`, or `failed`.",
            "default": "available"
          },
          "error": {
            "type": "string",
            "description": "Error message. Displays error generated on failure of creating or deleting an attribute.",
            "default": ""
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          },
          "format": {
            "enum": ["email", "enum", "ip", "datetime", "url", "integer", "float"],
            "type": "string"
          },
          "default": {
            "type": "string",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "key",
          "type",
          "status",
          "error",
          "required",
          "array",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions",
          "format",
          "default"
        ]
      },
      "CreateIntegerAttributeDTO": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number",
            "description": "Minimum value to enforce on new documents"
          },
          "max": {
            "type": "number",
            "description": "Maximum value to enforce on new documents"
          },
          "default": {
            "type": "number",
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required."
          },
          "key": {
            "type": "string",
            "description": "Attribute Key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          }
        },
        "required": ["key"]
      },
      "AttributeIntegerModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key.",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "Attribute type.",
            "default": "",
            "enum": [
              "string",
              "integer",
              "float",
              "boolean",
              "timestamptz",
              "jsonb",
              "relationship",
              "virtual",
              "uuid"
            ]
          },
          "status": {
            "type": "string",
            "description": "Attribute status. Possible values: `available`, `processing`, `deleting`, `stuck`, or `failed`.",
            "default": "available"
          },
          "error": {
            "type": "string",
            "description": "Error message. Displays error generated on failure of creating or deleting an attribute.",
            "default": ""
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          },
          "min": {
            "type": "number",
            "nullable": true,
            "default": null
          },
          "max": {
            "type": "number",
            "nullable": true,
            "default": null
          },
          "default": {
            "type": "number",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "key",
          "type",
          "status",
          "error",
          "required",
          "array",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions",
          "min",
          "max",
          "default"
        ]
      },
      "CreateFloatAttributeDTO": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number",
            "description": "Minimum value to enforce on new documents"
          },
          "max": {
            "type": "number",
            "description": "Maximum value to enforce on new documents"
          },
          "default": {
            "type": "number",
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required."
          },
          "key": {
            "type": "string",
            "description": "Attribute Key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          }
        },
        "required": ["key"]
      },
      "AttributeFloatModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key.",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "Attribute type.",
            "default": "",
            "enum": [
              "string",
              "integer",
              "float",
              "boolean",
              "timestamptz",
              "jsonb",
              "relationship",
              "virtual",
              "uuid"
            ]
          },
          "status": {
            "type": "string",
            "description": "Attribute status. Possible values: `available`, `processing`, `deleting`, `stuck`, or `failed`.",
            "default": "available"
          },
          "error": {
            "type": "string",
            "description": "Error message. Displays error generated on failure of creating or deleting an attribute.",
            "default": ""
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          },
          "min": {
            "type": "number",
            "nullable": true,
            "default": null
          },
          "max": {
            "type": "number",
            "nullable": true,
            "default": null
          },
          "default": {
            "type": "number",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "key",
          "type",
          "status",
          "error",
          "required",
          "array",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions",
          "min",
          "max",
          "default"
        ]
      },
      "CreateBooleanAttributeDTO": {
        "type": "object",
        "properties": {
          "default": {
            "type": "boolean",
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": false
          },
          "key": {
            "type": "string",
            "description": "Attribute Key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          }
        },
        "required": ["key"]
      },
      "AttributeBooleanModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key.",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "Attribute type.",
            "default": "",
            "enum": [
              "string",
              "integer",
              "float",
              "boolean",
              "timestamptz",
              "jsonb",
              "relationship",
              "virtual",
              "uuid"
            ]
          },
          "status": {
            "type": "string",
            "description": "Attribute status. Possible values: `available`, `processing`, `deleting`, `stuck`, or `failed`.",
            "default": "available"
          },
          "error": {
            "type": "string",
            "description": "Error message. Displays error generated on failure of creating or deleting an attribute.",
            "default": ""
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          },
          "default": {
            "type": "boolean",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "key",
          "type",
          "status",
          "error",
          "required",
          "array",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions",
          "default"
        ]
      },
      "CreateDatetimeAttributeDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "string",
            "nullable": true,
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": null
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          }
        },
        "required": ["key"]
      },
      "AttributeDatetimeModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key.",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "Attribute type.",
            "default": "",
            "enum": [
              "string",
              "integer",
              "float",
              "boolean",
              "timestamptz",
              "jsonb",
              "relationship",
              "virtual",
              "uuid"
            ]
          },
          "status": {
            "type": "string",
            "description": "Attribute status. Possible values: `available`, `processing`, `deleting`, `stuck`, or `failed`.",
            "default": "available"
          },
          "error": {
            "type": "string",
            "description": "Error message. Displays error generated on failure of creating or deleting an attribute.",
            "default": ""
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          },
          "format": {
            "enum": ["email", "enum", "ip", "datetime", "url", "integer", "float"],
            "type": "string"
          },
          "default": {
            "type": "string",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "key",
          "type",
          "status",
          "error",
          "required",
          "array",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions",
          "format",
          "default"
        ]
      },
      "CreateRelationAttributeDTO": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Relation type",
            "enum": ["oneToOne", "oneToMany", "manyToOne", "manyToMany"],
            "type": "string"
          },
          "onDelete": {
            "description": "Constraints option",
            "enum": ["cascade", "setNull", "restrict"],
            "type": "string"
          },
          "relatedCollectionId": {
            "type": "string",
            "description": "Related Collection ID."
          },
          "twoWay": {
            "type": "boolean",
            "description": "Is Two Way?",
            "default": false
          },
          "key": {
            "type": "string",
            "description": "Attribute Key."
          },
          "twoWayKey": {
            "type": "string",
            "description": "Two Way Attribute Key."
          }
        },
        "required": ["type", "onDelete", "relatedCollectionId", "key"]
      },
      "AttributeRelationshipModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Attribute Key.",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "Attribute type.",
            "default": ""
          },
          "status": {
            "type": "string",
            "description": "Attribute status. Possible values: `available`, `processing`, `deleting`, `stuck`, or `failed`.",
            "default": "available"
          },
          "error": {
            "type": "string",
            "description": "Error message. Displays error generated on failure of creating or deleting an attribute.",
            "default": ""
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "array": {
            "type": "boolean",
            "description": "Is attribute an array?",
            "default": false
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          },
          "relatedCollection": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "relationType": {
            "enum": ["oneToOne", "oneToMany", "manyToOne", "manyToMany"],
            "type": "string"
          },
          "twoWay": {
            "type": "boolean",
            "default": false
          },
          "twoWayKey": {
            "type": "string"
          },
          "onDelete": {
            "enum": ["cascade", "setNull", "restrict"],
            "type": "string"
          },
          "side": {
            "type": "string",
            "default": ""
          }
        },
        "required": [
          "key",
          "type",
          "status",
          "error",
          "required",
          "array",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions",
          "relatedCollection",
          "relationType",
          "twoWay",
          "twoWayKey",
          "onDelete",
          "side"
        ]
      },
      "UpdateStringAttributeDTO": {
        "type": "object",
        "properties": {
          "newKey": {
            "type": "string",
            "description": "New attribute key."
          },
          "size": {
            "type": "number",
            "description": "Attribute size for text attributes, in number of characters",
            "default": 0,
            "minimum": 1
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "string",
            "nullable": true,
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": null
          }
        }
      },
      "UpdateEmailAttributeDTO": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number",
            "description": "Attribute size for text attributes, in number of characters",
            "default": 0,
            "minimum": 1
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "string",
            "nullable": true,
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": null
          },
          "newKey": {
            "type": "string",
            "description": "New attribute key."
          }
        }
      },
      "UpdateEnumAttributeDTO": {
        "type": "object",
        "properties": {
          "newKey": {
            "type": "string",
            "description": "New attribute key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "object",
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": null
          },
          "elements": {
            "description": "Array of elements in enumerated type. Uses length of longest element to determine size.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 1024,
              "minLength": 1
            }
          }
        }
      },
      "UpdateIpAttributeDTO": {
        "type": "object",
        "properties": {
          "newKey": {
            "type": "string",
            "description": "New attribute key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "string",
            "nullable": true,
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": null
          }
        }
      },
      "UpdateURLAttributeDTO": {
        "type": "object",
        "properties": {
          "newKey": {
            "type": "string",
            "description": "New attribute key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "string",
            "nullable": true,
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": null
          }
        }
      },
      "UpdateIntegerAttributeDTO": {
        "type": "object",
        "properties": {
          "newKey": {
            "type": "string",
            "description": "New attribute key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "number",
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required."
          },
          "min": {
            "type": "number",
            "description": "Minimum value to enforce on new documents"
          },
          "max": {
            "type": "number",
            "description": "Maximum value to enforce on new documents"
          }
        }
      },
      "UpdateFloatAttributeDTO": {
        "type": "object",
        "properties": {
          "newKey": {
            "type": "string",
            "description": "New attribute key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "number",
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required."
          },
          "min": {
            "type": "number",
            "description": "Minimum value to enforce on new documents"
          },
          "max": {
            "type": "number",
            "description": "Maximum value to enforce on new documents"
          }
        }
      },
      "UpdateBooleanAttributeDTO": {
        "type": "object",
        "properties": {
          "newKey": {
            "type": "string",
            "description": "New attribute key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "boolean",
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": false
          }
        }
      },
      "UpdateDatetimeAttributeDTO": {
        "type": "object",
        "properties": {
          "newKey": {
            "type": "string",
            "description": "New attribute key."
          },
          "required": {
            "type": "boolean",
            "description": "Is attribute required?",
            "default": false
          },
          "default": {
            "type": "string",
            "nullable": true,
            "description": "Default value for attribute when not provided. Cannot be set when attribute is required.",
            "default": null
          }
        }
      },
      "UpdateRelationAttributeDTO": {
        "type": "object",
        "properties": {
          "onDelete": {
            "description": "Constraints option",
            "enum": ["cascade", "setNull", "restrict"],
            "type": "string"
          },
          "newKey": {
            "type": "string",
            "description": "New attribute key."
          }
        }
      },
      "CreateIndexDTO": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Index type.",
            "enum": ["unique", "key", "fulltext", "spatial"],
            "type": "string"
          },
          "orders": {
            "type": "array",
            "description": "Array of index orders.",
            "items": {
              "type": "string",
              "enum": ["ASC", "DESC", null]
            }
          },
          "key": {
            "type": "string",
            "description": "Index Key."
          },
          "attributes": {
            "description": "Array of attributes to index.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["type", "orders", "key", "attributes"]
      },
      "DocumentModel": {
        "type": "object",
        "properties": {
          "$collection": {
            "type": "string",
            "description": "Collection ID."
          },
          "$schema": {
            "type": "string",
            "description": "Database ID."
          },
          "runtime": {
            "type": "string",
            "description": "Runtime."
          },
          "$id": {
            "type": "string",
            "description": "ID."
          },
          "$createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date in ISO 8601 format."
          },
          "$updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User update date in ISO 8601 format."
          },
          "$permissions": {
            "type": "object"
          }
        },
        "required": [
          "$collection",
          "$schema",
          "runtime",
          "$id",
          "$createdAt",
          "$updatedAt",
          "$permissions"
        ]
      },
      "CreateDocumentDTO": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "description": "ocument ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars."
          },
          "data": {
            "type": "object",
            "description": "Document data as JSON object."
          },
          "permissions": {
            "description": "An array of permissions strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://docs.nuvix.in/permissions).'",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["documentId", "data", "permissions"]
      },
      "UpdateDocumentDTO": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Document data as JSON object."
          },
          "permissions": {
            "description": "An array of permissions strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://docs.nuvix.in/permissions).'",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
